{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":6361775,"sourceType":"datasetVersion","datasetId":3664633}],"dockerImageVersionId":30236,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/chenshu321/spp-dac-unext?scriptVersionId=163881911\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# 无spp模块的 DAC-SCCONV-UNEXT \n> https://github.com/jeya-maria-jose/UNeXt-pytorch","metadata":{}},{"cell_type":"code","source":"%config Completer.use_jedi = False","metadata":{"_uuid":"2a78186a-a663-4493-a796-33b0f558bf7a","_cell_guid":"1b772f0f-3a0c-4b91-b596-998d2e0fddd9","jupyter":{"outputs_hidden":false},"collapsed":false,"execution":{"iopub.status.busy":"2024-02-18T15:45:23.237028Z","iopub.execute_input":"2024-02-18T15:45:23.237738Z","iopub.status.idle":"2024-02-18T15:45:23.253898Z","shell.execute_reply.started":"2024-02-18T15:45:23.237695Z","shell.execute_reply":"2024-02-18T15:45:23.25284Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 引入依赖包","metadata":{}},{"cell_type":"code","source":"!pip install scipy scikit-image torch torchvision pathlib wandb segmentation-models-pytorch\n!pip install wandb","metadata":{"execution":{"iopub.status.busy":"2024-02-18T15:45:23.255428Z","iopub.execute_input":"2024-02-18T15:45:23.255756Z","iopub.status.idle":"2024-02-18T15:45:45.752717Z","shell.execute_reply.started":"2024-02-18T15:45:23.255728Z","shell.execute_reply":"2024-02-18T15:45:45.751522Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport random\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use(\"ggplot\")\n%matplotlib inline\n\nimport torch\nimport torch.nn as nn\nfrom torchvision import models, transforms\nfrom torch.nn.functional import relu, pad\nfrom torch.utils.data import Dataset, DataLoader, random_split\n\nfrom PIL import Image\nfrom typing import Tuple\nfrom pathlib import Path\n\nimport torch\nfrom torch import nn, Tensor\nimport torch.nn.functional as F\nimport torch.optim as optim\n\nfrom tqdm import tqdm\nimport wandb\nimport logging","metadata":{"execution":{"iopub.status.busy":"2024-02-18T15:45:45.754963Z","iopub.execute_input":"2024-02-18T15:45:45.755352Z","iopub.status.idle":"2024-02-18T15:45:45.769465Z","shell.execute_reply.started":"2024-02-18T15:45:45.755317Z","shell.execute_reply":"2024-02-18T15:45:45.768428Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 设置wandb账号\n用作统计与数据分析","metadata":{}},{"cell_type":"markdown","source":"## ScConv\n> https://github.com/XxxxYi/Reproduction_of_ScConv_CVPR2023/blob/main/scconv.py","metadata":{}},{"cell_type":"code","source":"\n\nclass GroupNorm2d(nn.Module):\n\n    def __init__(self, n_groups: int = 16, n_channels: int = 16, eps: float = 1e-10):\n        super(GroupNorm2d, self).__init__()  \n        assert n_channels % n_groups == 0 \n        self.n_groups = n_groups  \n        self.gamma = nn.Parameter(torch.randn(n_channels, 1, 1))  # learnable gamma\n        self.beta = nn.Parameter(torch.zeros(n_channels, 1, 1))  # learnable beta\n        self.eps = eps \n\n    def forward(self, x):\n        N, C, H, W = x.size()\n        x = x.reshape(N, self.n_groups, -1) \n        mean = x.mean(dim=2, keepdim=True)  \n        std = x.std(dim=2, keepdim=True)\n        x = (x - mean) / (std + self.eps) \n        x = x.reshape(N, C, H, W)  \n        return x * self.gamma + self.beta  \n\n\n# Spatial and Reconstruct Unit\nclass SRU(nn.Module):\n\n    def __init__(\n            self,\n            n_channels: int,  # in_channels\n            n_groups: int = 16,  # 16\n            gate_treshold: float = 0.5,  # 0.5,\n            torch_gn:bool = True\n    ):\n        super().__init__()  \n\n        # initialize GroupNorm2d\n        self.gn = nn.GroupNorm( num_channels = n_channels, num_groups = n_groups ) if torch_gn else GroupNorm2d(n_channels = n_channels, n_groups = n_groups)\n        # self.gn = GroupNorm2d(n_groups=n_groups, n_channels=n_channels)\n        self.gate_treshold = gate_treshold  \n        self.sigomid = nn.Sigmoid()  \n\n    def forward(self, x):\n        gn_x = self.gn(x) \n        w_gamma = self.gn.gamma / sum(self.gn.gamma)  # cal gamma weight\n        reweights = self.sigomid(gn_x * w_gamma)  # importance\n\n        info_mask = reweights >= self.gate_treshold\n        noninfo_mask = reweights < self.gate_treshold\n        x_1 = info_mask * x  \n        x_2 = noninfo_mask * x  \n        x = self.reconstruct(x_1, x_2) \n        return x\n\n    def reconstruct(self, x_1, x_2):\n        x_11, x_12 = torch.split(x_1, x_1.size(1) // 2, dim=1)\n        x_21, x_22 = torch.split(x_2, x_2.size(1) // 2, dim=1)\n        return torch.cat([x_11 + x_22, x_12 + x_21], dim=1)\n\n\n# Channel Reduction Unit\nclass CRU(nn.Module):\n\n    def __init__(self, in_channels: int, out_channels: int, kernel_size: int = 3, alpha: float = 1 / 2, squeeze_radio: int = 2, groups: int = 2):\n        super().__init__()\n\n        self.up_channel = up_channel = int(alpha * in_channels)\n        self.low_channel = low_channel = in_channels - up_channel\n        self.squeeze1 = nn.Conv2d(up_channel, up_channel // squeeze_radio, kernel_size=1, bias=False)\n        self.squeeze2 = nn.Conv2d(low_channel, low_channel // squeeze_radio, kernel_size=1, bias=False)\n\n        in_ch = up_channel // squeeze_radio\n        out_ch = out_channels\n        print(\"out_channels:\", out_channels, \"squeeze_radio: \", squeeze_radio, \"up_channel: \",up_channel,\"in_ch (out_channels // squeeze_radio): \", in_ch, \"out_ch(out_channels):\", out_ch)\n        \n        \n        if in_ch >= 16:\n            groups = 16\n    \n        self.GWC = nn.Conv2d(in_ch, out_channels, kernel_size=kernel_size, stride=1, padding=kernel_size // 2, groups=groups) \n        self.PWC1 = nn.Conv2d(in_ch, out_channels, kernel_size=1, bias=False)\n\n        print(\"in_ch: \", in_ch, \"out_channels: \", out_channels,\"groups: \",groups)\n        print(\"up_channel: \", self.up_channel, \"low_channel: \", self.low_channel)\n        in_ch = low_channel // squeeze_radio\n        out_ch = out_channels - low_channel // squeeze_radio\n        print(\"out_channels:\", out_channels, \"squeeze_radio: \", squeeze_radio, \"low_channel: \",low_channel,\"in_ch (low_channel // squeeze_radio): \", in_ch, \"out_ch(out_channels - low_channel // squeeze_radio):\", out_ch)\n        self.PWC2 = nn.Conv2d(in_ch, out_ch, kernel_size=1, bias=False) \n        #print(\"self.PWC2.weight.shape: \",self.PWC2.weight.shape)\n        self.pool = nn.AdaptiveAvgPool2d(1)  \n        \n    def forward(self, x):\n\n        up, low = torch.split(x, [self.up_channel, self.low_channel], dim=1)\n        up, low = self.squeeze1(up), self.squeeze2(low)\n\n        y1 = self.GWC(up) + self.PWC1(up)\n        \n        #print(\"low: \",low.shape)\n        pwc2 = self.PWC2(low)\n        #print(\"pwc2\", pwc2.shape)\n        y2 = torch.cat([pwc2, low], dim=1)\n\n        s1 = self.pool(y1)\n        s2 = self.pool(y2)\n        s = torch.cat([s1, s2], dim=1)\n        beta = F.softmax(s, dim=1)\n        beta1, beta2 = torch.split(beta, beta.size(1) // 2, dim=1)\n        y = beta1 * y1 + beta2 * y2\n        return y\n\n\n# Squeeze and Channel Reduction Convolution\nclass ScConv(nn.Module):\n\n    def __init__(self, in_channels: int, out_channels: int, kernel_size: int = 3, stride: int = 1, padding: int = 1, n_groups: int = 2, gate_treshold: float = 0.5, alpha: float = 1 / 2, squeeze_radio: int = 2, groups: int = 2):\n        super().__init__()\n\n        self.SRU = SRU(in_channels, n_groups=n_groups, gate_treshold=gate_treshold, torch_gn=False) \n        self.CRU = CRU(in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, alpha=alpha, squeeze_radio=squeeze_radio, groups=groups)\n\n    def forward(self, x):\n        x = self.SRU(x)  \n        x = self.CRU(x) \n        return x\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-02-18T15:45:45.771026Z","iopub.execute_input":"2024-02-18T15:45:45.771412Z","iopub.status.idle":"2024-02-18T15:45:45.806828Z","shell.execute_reply.started":"2024-02-18T15:45:45.771374Z","shell.execute_reply":"2024-02-18T15:45:45.805885Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"CE-NET中DAC模块","metadata":{}},{"cell_type":"code","source":"from functools import partial\n\nnonlinearity = partial(F.relu, inplace=True)\n\nclass DACblock(nn.Module):\n    def __init__(self, channel):\n        super(DACblock, self).__init__()\n        self.dilate1 = nn.Conv2d(channel, channel, kernel_size=3, dilation=1, padding=1)\n        self.dilate2 = nn.Conv2d(channel, channel, kernel_size=3, dilation=3, padding=3)\n        self.dilate3 = nn.Conv2d(channel, channel, kernel_size=3, dilation=5, padding=5)\n        self.conv1x1 = nn.Conv2d(channel, channel, kernel_size=1, dilation=1, padding=0)\n        for m in self.modules():\n            if isinstance(m, nn.Conv2d) or isinstance(m, nn.ConvTranspose2d):\n                if m.bias is not None:\n                    m.bias.data.zero_()\n\n    def forward(self, x):\n        dilate1_out = nonlinearity(self.dilate1(x))\n        dilate2_out = nonlinearity(self.conv1x1(self.dilate2(x)))\n        dilate3_out = nonlinearity(self.conv1x1(self.dilate2(self.dilate1(x))))\n        dilate4_out = nonlinearity(self.conv1x1(self.dilate3(self.dilate2(self.dilate1(x)))))\n        out = x + dilate1_out + dilate2_out + dilate3_out + dilate4_out\n        return out\n\nclass SPPblock(nn.Module):\n    def __init__(self, in_channels):\n            super(SPPblock, self).__init__()\n            self.pool1 = nn.MaxPool2d(kernel_size=[2, 2], stride=2)\n            self.pool2 = nn.MaxPool2d(kernel_size=[3, 3], stride=3)\n            self.pool3 = nn.MaxPool2d(kernel_size=[5, 5], stride=5)\n            self.pool4 = nn.MaxPool2d(kernel_size=[6, 6], stride=6)\n\n            self.conv = nn.Conv2d(in_channels=in_channels, out_channels=1, kernel_size=1, padding=0)\n\n    def forward(self, x):\n        self.in_channels, h, w = x.size(1), x.size(2), x.size(3)\n        self.layer1 = F.upsample(self.conv(self.pool1(x)), size=(h, w), mode='bilinear')\n        self.layer2 = F.upsample(self.conv(self.pool2(x)), size=(h, w), mode='bilinear')\n        self.layer3 = F.upsample(self.conv(self.pool3(x)), size=(h, w), mode='bilinear')\n        self.layer4 = F.upsample(self.conv(self.pool4(x)), size=(h, w), mode='bilinear')\n\n        out = torch.cat([self.layer1, self.layer2, self.layer3, self.layer4, x], 1)\n\n        return out\n","metadata":{"execution":{"iopub.status.busy":"2024-02-18T15:45:45.809255Z","iopub.execute_input":"2024-02-18T15:45:45.809576Z","iopub.status.idle":"2024-02-18T15:45:45.829611Z","shell.execute_reply.started":"2024-02-18T15:45:45.809547Z","shell.execute_reply":"2024-02-18T15:45:45.828629Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import torch\nfrom torch import nn\nimport torch\nimport torchvision\nfrom torch import nn\nfrom torch.autograd import Variable\nfrom torch.utils.data import DataLoader\nfrom torchvision import transforms\nfrom torchvision.utils import save_image\nimport torch.nn.functional as F\nimport os\nimport matplotlib.pyplot as plt\n# from utils import *\n\nimport timm\nfrom timm.models.layers import DropPath, to_2tuple, trunc_normal_\nimport types\nimport math\nfrom abc import ABCMeta, abstractmethod\n# from mmcv.cnn import ConvModule\nimport pdb\n\n\n\n# def conv1x1(in_planes: int, out_planes: int, stride: int = 1) -> nn.Conv2d:\n#     \"\"\"1x1 convolution\"\"\"\n#     return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=1, bias=False)\n\n\ndef shift(dim):\n            x_shift = [ torch.roll(x_c, shift, dim) for x_c, shift in zip(xs, range(-self.pad, self.pad+1))]\n            x_cat = torch.cat(x_shift, 1)\n            x_cat = torch.narrow(x_cat, 2, self.pad, H)\n            x_cat = torch.narrow(x_cat, 3, self.pad, W)\n            return x_cat\n\nclass shiftmlp(nn.Module):\n    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0., shift_size=5):\n        super().__init__()\n        out_features = out_features or in_features\n        hidden_features = hidden_features or in_features\n        self.dim = in_features\n        self.fc1 = nn.Linear(in_features, hidden_features)\n        self.dwconv = DWConv(hidden_features)\n        self.act = act_layer()\n        self.fc2 = nn.Linear(hidden_features, out_features)\n        self.drop = nn.Dropout(drop)\n\n        self.shift_size = shift_size\n        self.pad = shift_size // 2\n\n        \n        self.apply(self._init_weights)\n\n    def _init_weights(self, m):\n        if isinstance(m, nn.Linear):\n            trunc_normal_(m.weight, std=.02)\n            if isinstance(m, nn.Linear) and m.bias is not None:\n                nn.init.constant_(m.bias, 0)\n        elif isinstance(m, nn.LayerNorm):\n            nn.init.constant_(m.bias, 0)\n            nn.init.constant_(m.weight, 1.0)\n        elif isinstance(m, nn.Conv2d):\n            fan_out = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\n            fan_out //= m.groups\n            m.weight.data.normal_(0, math.sqrt(2.0 / fan_out))\n            if m.bias is not None:\n                m.bias.data.zero_()\n    \n#     def shift(x, dim):\n#         x = F.pad(x, \"constant\", 0)\n#         x = torch.chunk(x, shift_size, 1)\n#         x = [ torch.roll(x_c, shift, dim) for x_s, shift in zip(x, range(-pad, pad+1))]\n#         x = torch.cat(x, 1)\n#         return x[:, :, pad:-pad, pad:-pad]\n\n    def forward(self, x, H, W):\n        # pdb.set_trace()\n        B, N, C = x.shape\n\n        xn = x.transpose(1, 2).view(B, C, H, W).contiguous()\n        xn = F.pad(xn, (self.pad, self.pad, self.pad, self.pad) , \"constant\", 0)\n        xs = torch.chunk(xn, self.shift_size, 1)\n        x_shift = [torch.roll(x_c, shift, 2) for x_c, shift in zip(xs, range(-self.pad, self.pad+1))]\n        x_cat = torch.cat(x_shift, 1)\n        x_cat = torch.narrow(x_cat, 2, self.pad, H)\n        x_s = torch.narrow(x_cat, 3, self.pad, W)\n\n\n        x_s = x_s.reshape(B,C,H*W).contiguous()\n        x_shift_r = x_s.transpose(1,2)\n\n\n        x = self.fc1(x_shift_r)\n\n        x = self.dwconv(x, H, W)\n        x = self.act(x) \n        x = self.drop(x)\n\n        xn = x.transpose(1, 2).view(B, C, H, W).contiguous()\n        xn = F.pad(xn, (self.pad, self.pad, self.pad, self.pad) , \"constant\", 0)\n        xs = torch.chunk(xn, self.shift_size, 1)\n        x_shift = [torch.roll(x_c, shift, 3) for x_c, shift in zip(xs, range(-self.pad, self.pad+1))]\n        x_cat = torch.cat(x_shift, 1)\n        x_cat = torch.narrow(x_cat, 2, self.pad, H)\n        x_s = torch.narrow(x_cat, 3, self.pad, W)\n        x_s = x_s.reshape(B,C,H*W).contiguous()\n        x_shift_c = x_s.transpose(1,2)\n\n        x = self.fc2(x_shift_c)\n        x = self.drop(x)\n        return x\n\n\n\nclass shiftedBlock(nn.Module):\n    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,\n                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm, sr_ratio=1):\n        super().__init__()\n\n\n        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()\n        self.norm2 = norm_layer(dim)\n        mlp_hidden_dim = int(dim * mlp_ratio)\n        self.mlp = shiftmlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)\n        self.apply(self._init_weights)\n\n    def _init_weights(self, m):\n        if isinstance(m, nn.Linear):\n            trunc_normal_(m.weight, std=.02)\n            if isinstance(m, nn.Linear) and m.bias is not None:\n                nn.init.constant_(m.bias, 0)\n        elif isinstance(m, nn.LayerNorm):\n            nn.init.constant_(m.bias, 0)\n            nn.init.constant_(m.weight, 1.0)\n        elif isinstance(m, nn.Conv2d):\n            fan_out = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\n            fan_out //= m.groups\n            m.weight.data.normal_(0, math.sqrt(2.0 / fan_out))\n            if m.bias is not None:\n                m.bias.data.zero_()\n\n    def forward(self, x, H, W):\n\n        x = x + self.drop_path(self.mlp(self.norm2(x), H, W))\n        return x\n\n\nclass DWConv(nn.Module):\n    def __init__(self, dim=768):\n        super(DWConv, self).__init__()\n        self.dwconv = nn.Conv2d(dim, dim, 3, 1, 1, bias=True, groups=dim)\n\n    def forward(self, x, H, W):\n        B, N, C = x.shape\n        x = x.transpose(1, 2).view(B, C, H, W)\n        x = self.dwconv(x)\n        x = x.flatten(2).transpose(1, 2)\n\n        return x\n\nclass OverlapPatchEmbed(nn.Module):\n    \"\"\" Image to Patch Embedding\n    \"\"\"\n\n    def __init__(self, img_size=224, patch_size=7, stride=4, in_chans=3, embed_dim=768):\n        super().__init__()\n        img_size = to_2tuple(img_size)\n        patch_size = to_2tuple(patch_size)\n\n        self.img_size = img_size\n        self.patch_size = patch_size\n        self.H, self.W = img_size[0] // patch_size[0], img_size[1] // patch_size[1]\n        self.num_patches = self.H * self.W\n        self.proj = nn.Conv2d(in_chans, embed_dim, kernel_size=patch_size, stride=stride,\n                              padding=(patch_size[0] // 2, patch_size[1] // 2))\n        self.norm = nn.LayerNorm(embed_dim)\n\n        self.apply(self._init_weights)\n\n    def _init_weights(self, m):\n        if isinstance(m, nn.Linear):\n            trunc_normal_(m.weight, std=.02)\n            if isinstance(m, nn.Linear) and m.bias is not None:\n                nn.init.constant_(m.bias, 0)\n        elif isinstance(m, nn.LayerNorm):\n            nn.init.constant_(m.bias, 0)\n            nn.init.constant_(m.weight, 1.0)\n        elif isinstance(m, nn.Conv2d):\n            fan_out = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\n            fan_out //= m.groups\n            m.weight.data.normal_(0, math.sqrt(2.0 / fan_out))\n            if m.bias is not None:\n                m.bias.data.zero_()\n\n    def forward(self, x):\n        x = self.proj(x)\n        _, _, H, W = x.shape\n        x = x.flatten(2).transpose(1, 2)\n        x = self.norm(x)\n\n        return x, H, W\n\nsigmoid = nn.Sigmoid()\nif torch.cuda.is_available():\n    sigmoid = sigmoid.cuda()\n\nclass UNext(nn.Module):\n\n    ## Conv 3 + scconv1 + shifted MLP +DAC\n    \n    def __init__(self,  num_classes, input_channels=3, deep_supervision=False,img_size=224, patch_size=16, in_chans=3,  embed_dims=[ 256, 512, 512 ],\n                 num_heads=[1, 2, 4, 8], mlp_ratios=[4, 4, 4, 4], qkv_bias=False, qk_scale=None, drop_rate=0.,\n                 attn_drop_rate=0., drop_path_rate=0., norm_layer=nn.LayerNorm,\n                 depths=[1, 1, 1], sr_ratios=[8, 4, 2, 1], **kwargs):\n        super().__init__()\n        self.num_classes = num_classes\n        self.input_channels = input_channels\n        \n        self.encoder1 = nn.Conv2d(3, 16, 3, stride=1, padding=1)  \n        self.encoder2 = nn.Conv2d(16, 32, 3, stride=1, padding=1)  \n        self.encoder3 = nn.Conv2d(32, 128, 3, stride=1, padding=1)\n        self.encoder4 = ScConv(128, 256, 3, stride=1, padding=1)\n\n        self.ebn1 = nn.BatchNorm2d(16)\n        self.ebn2 = nn.BatchNorm2d(32)\n        self.ebn3 = nn.BatchNorm2d(128)\n        self.ebn4 = nn.BatchNorm2d(256)\n        \n        self.norm3 = norm_layer(512)\n        #self.norm4 = norm_layer(embed_dims[2])\n\n#         self.dnorm3 = norm_layer(512)\n        self.dnorm4 = norm_layer(256)\n\n    \n        \n        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, sum(depths))]\n\n        self.block1 = nn.ModuleList([shiftedBlock(\n            dim=embed_dims[1], num_heads=num_heads[0], mlp_ratio=1, qkv_bias=qkv_bias, qk_scale=qk_scale,\n            drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], norm_layer=norm_layer,\n            sr_ratio=sr_ratios[0])])#256\n\n#         self.block2 = nn.ModuleList([shiftedBlock(\n#             dim=embed_dims[2], num_heads=num_heads[0], mlp_ratio=1, qkv_bias=qkv_bias, qk_scale=qk_scale,\n#             drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[1], norm_layer=norm_layer,\n#             sr_ratio=sr_ratios[0])])#512\n\n#         self.dblock1 = nn.ModuleList([shiftedBlock(\n#             dim=embed_dims[1], num_heads=num_heads[0], mlp_ratio=1, qkv_bias=qkv_bias, qk_scale=qk_scale,\n#             drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], norm_layer=norm_layer,\n#             sr_ratio=sr_ratios[0])])\n\n        self.dblock2 = nn.ModuleList([shiftedBlock(\n            dim=embed_dims[0], num_heads=num_heads[0], mlp_ratio=1, qkv_bias=qkv_bias, qk_scale=qk_scale,\n            drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[1], norm_layer=norm_layer,\n            sr_ratio=sr_ratios[0])])\n        \n\n        self.patch_embed3 = OverlapPatchEmbed(img_size=img_size // 4, patch_size=3, stride=2, in_chans=embed_dims[0],\n                                              embed_dim=embed_dims[1])#（256，512）\n        #self.patch_embed4 = OverlapPatchEmbed(img_size=img_size // 8, patch_size=3, stride=2, in_chans=embed_dims[1],\n        #                                      embed_dim=embed_dims[2])#（256，512）\n        self.dac = DACblock(512)\n        #self.spp = SPPblock(512)\n        #self.conv = nn.Conv2d(516, 512, 1, stride=1)\n        \n        self.decoder1 =   nn.Conv2d(512, 256, 3, stride=1,padding=1) \n        self.decoder2 =   ScConv(256, 128, 3, stride=1, padding=1)  \n        self.decoder3 =   nn.Conv2d(128, 32, 3, stride=1, padding=1) \n        self.decoder4 =   nn.Conv2d(32, 16, 3, stride=1, padding=1)\n        self.decoder5 =   nn.Conv2d(16, 16, 3, stride=1, padding=1)\n\n        self.dbn1 = nn.BatchNorm2d(256)\n        self.dbn2 = nn.BatchNorm2d(128)\n        self.dbn3 = nn.BatchNorm2d(32)\n        self.dbn4 = nn.BatchNorm2d(16)\n        \n        self.final = nn.Conv2d(16, num_classes, kernel_size=1)\n\n\n\n    def forward(self, x):\n        \n        B = x.shape[0]\n        ### Encoder\n        ### Conv Stage\n\n        ### Stage 1\n        out = F.relu(F.max_pool2d(self.ebn1(self.encoder1(x)),2,2))\n        e1 = out\n        ### Stage 2\n        out = F.relu(F.max_pool2d(self.ebn2(self.encoder2(out)),2,2))\n        e2 = out\n        ### Stage 3\n        out = F.relu(F.max_pool2d(self.ebn3(self.encoder3(out)),2,2))\n        e3 = out\n        ### Stage 4\n        out = F.relu(F.max_pool2d(self.ebn4(self.encoder4(out)),2,2))\n        e4 = out\n        \n        \n        ### Tokenized MLP Stage\n        ### Stage 5\n\n        out,H,W = self.patch_embed3(e4)\n        for i, blk in enumerate(self.block1):\n            out = blk(out, H, W)\n        out = self.norm3(out)\n        out = out.reshape(B, H, W, -1).permute(0, 3, 1, 2).contiguous()\n        e5 = out\n        ### Bottleneck\n\n#         out ,H,W= self.patch_embed4(out)\n#         for i, blk in enumerate(self.block2):\n#             out = blk(out, H, W)\n#         out = self.norm4(out)\n#         out = out.reshape(B, H, W, -1).permute(0, 3, 1, 2).contiguous()\n        \n#         out = F.max_pool2d(out,2,2)\n\n\n        out = self.dac(out) \n        #print(\"DAC=\",out.shape)\n        #out = self.spp(out)\n        #print(\"SPP=\",out.shape)\n        \n#         out = self.norm4(out)\n#         out = out.reshape(B, H, W, -1).permute(0, 3, 1, 2).contiguous()\n\n        ### Stage 4\n\n#         out = F.relu(F.interpolate(self.dbn1(self.decoder1(out)),scale_factor=(2,2),mode ='bilinear'))\n#         out = self.conv(out)\n#         out = torch.add(out,e4)\n#         print(\"outstage4=\",out.shape)\n        \n#         _,_,H,W = out.shape\n#         out = out.flatten(2).transpose(1,2)\n#         for i, blk in enumerate(self.dblock1):\n#             out = blk(out, H, W)\n#         out = self.dnorm3(out)\n#         out = out.reshape(B, H, W, -1).permute(0, 3, 1, 2).contiguous()\n        ### Stage 3\n         \n        out = F.relu(F.interpolate(self.dbn1(self.decoder1(out)),scale_factor=(2,2),mode ='bilinear'))\n        out = torch.add(out,e4)\n        _,_,H,W = out.shape\n        out = out.flatten(2).transpose(1,2)\n    \n        for i, blk in enumerate(self.dblock2):\n            out = blk(out, H, W)\n        out = self.dnorm4(out)\n        out = out.reshape(B, H, W, -1).permute(0, 3, 1, 2).contiguous()\n        \n        out = F.relu(F.interpolate(self.dbn2(self.decoder2(out)),scale_factor=(2,2),mode ='bilinear'))\n        out = torch.add(out,e3)\n        \n        out = F.relu(F.interpolate(self.dbn3(self.decoder3(out)),scale_factor=(2,2),mode ='bilinear'))\n        out = torch.add(out,e2)\n        \n        out = F.relu(F.interpolate(self.dbn4(self.decoder4(out)),scale_factor=(2,2),mode ='bilinear'))\n        out = torch.add(out,e1)\n    \n        out = F.relu(F.interpolate(self.decoder5(out),scale_factor=(2,2),mode ='bilinear'))\n        out = self.final(out)\n       \n        # 测试阶段，添加 sigmoid 和阈值过滤\n        if not self.training:\n            out = sigmoid(out)\n            out = torch.where(out>0.5, torch.ones_like(out), torch.zeros_like(out))\n            \n        return out\n","metadata":{"execution":{"iopub.status.busy":"2024-02-18T15:45:45.831535Z","iopub.execute_input":"2024-02-18T15:45:45.831891Z","iopub.status.idle":"2024-02-18T15:45:45.921813Z","shell.execute_reply.started":"2024-02-18T15:45:45.831855Z","shell.execute_reply":"2024-02-18T15:45:45.920947Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# TODO: image和mask名称不一样时跳过\nclass APODataSet(Dataset):\n    # 格式不对的异常数据\n    def __init__(self, img_dir, mask_dir: str, size) -> None:\n        # 获取所有图片路径\n        img_paths = list(Path(img_dir).glob(\"*\"))\n        mask_paths = list(Path(mask_dir).glob(\"*\"))\n        self.images = []\n        self.masks = []\n        for img_idx in range(len(img_paths)):\n            img_path = img_paths[img_idx]\n            img = self.load_image(img_path)\n            num_channels = len(img.getbands())\n            if num_channels != 3:\n                continue\n            \n            mask_path = mask_paths[img_idx]\n            self.images.append(img_path)\n            self.masks.append(mask_path)\n            \n        # 设置 transforms\n        self.transform = transforms.Compose([ transforms.Resize(size), \n                                             transforms.RandomHorizontalFlip(),  # 随机水平翻转\n                                             transforms.RandomVerticalFlip(),    # 随机垂直旋转\n                                             transforms.RandomRotation(10) ,     # 随机旋转 （-10,10）度\n                                             transforms.ToTensor()])\n#         self.transform = transforms.Compose([transforms.PILToTensor()])\n\n    def load_image(self, path) -> Image.Image:\n        \"Opens an image via a path and returns it.\"\n        return Image.open(path)\n    \n    #  重写 __len__() 方法 (optional but recommended for subclasses of torch.utils.data.Dataset)\n    def __len__(self) -> int:\n        \"Returns the total number of samples.\"\n        return len(self.images)\n\n    # 重写 __getitem__() 方法 (required for subclasses of torch.utils.data.Dataset)\n    def __getitem__(self, index: int) -> Tuple[torch.Tensor, torch.Tensor]:\n        \"Returns one sample of data, image and mask (X, y).\"\n        orig_img = self.load_image(self.images[index])\n        mask_img = self.load_image(self.masks[index])\n        \n        seed = np.random.randint(2147483647)\n        torch.manual_seed(seed)   # 指定同样的随机种子，以保证图片和label的旋转（水平、垂直和rotation）一致\n        orig_img = self.transform(orig_img)\n        torch.manual_seed(seed)  # 指定同样的随机种子，以保证图片和label的旋转（水平、垂直和rotation）一致\n        mask_img = self.transform(mask_img)\n        \n        mask_img = torch.where(mask_img>0.5,torch.ones_like(mask_img),torch.zeros_like(mask_img))\n        return orig_img, mask_img\n","metadata":{"execution":{"iopub.status.busy":"2024-02-18T15:45:45.923173Z","iopub.execute_input":"2024-02-18T15:45:45.923523Z","iopub.status.idle":"2024-02-18T15:45:45.938991Z","shell.execute_reply.started":"2024-02-18T15:45:45.923495Z","shell.execute_reply":"2024-02-18T15:45:45.938078Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n@torch.inference_mode()\ndef evaluate(net, dataloader, device, amp, experiment):\n    net.eval()\n    \n    num_val_batches = len(dataloader)\n    bce_loss = 0\n    dice_loss = 0\n    iou_score = 0\n\n    if isinstance(model, nn.DataParallel):\n        num_classes = net.module.num_classes\n    else:\n        num_classes = net.num_classes\n    \n    # 因为在非训练过程（推理过程中），已经在网络最后一层加了log和过滤\n    # 因此这里的损失函数都要使用不带log的\n    criterion = nn.BCELoss().cuda()\n    diceloss = smp.losses.DiceLoss(mode='binary', from_logits=False).cuda()\n    \n    # iterate over the validation set\n    with tqdm(total=num_val_batches, desc='Validation round', unit='batch', position=0 ,leave=True) as pbar:\n        for batch in dataloader:\n\n            images, mask_true = batch\n\n            # move images and labels to correct device and type\n            images = images.to(device=device, dtype=torch.float32, memory_format=torch.channels_last)\n            mask_true = mask_true.to(device=device, dtype=torch.float32)\n\n            # predict the mask\n            mask_pred = net(images)\n            bce_loss += criterion(mask_pred, mask_true.float())\n            dice_loss += diceloss(mask_pred, mask_true)\n\n            tp, fp, fn, tn = smp.metrics.get_stats(mask_pred, mask_true.long(), mode='binary', threshold=0.5)\n\n            iou_score += smp.metrics.iou_score(tp, fp, fn, tn, reduction=\"micro\")\n            pbar.update(images.shape[0])\n\n        bce_loss = (bce_loss / max(num_val_batches, 1))\n        dice_loss = (dice_loss / max(num_val_batches, 1))\n\n        iou_score = (iou_score / max(num_val_batches, 1))\n        pbar.set_postfix(**{\"Validation bce loss\": bce_loss.item(), \"dice loss\": dice_loss.item(), \"IoU Score\": iou_score.item()})\n    \n    try:\n        histograms = {}\n        for tag, value in net.named_parameters():\n            tag = tag.replace('/', '.')\n            if not (value is None) and not (torch.isinf(value) | torch.isnan(value)).any():\n                histograms['Weights/' + tag] = wandb.Histogram(value.data.cpu())\n            if not (value.grad is None) and not (torch.isinf(value.grad) | torch.isnan(value.grad)).any():\n                histograms['Gradients/' + tag] = wandb.Histogram(value.grad.data.cpu())\n\n        experiment.log({\n            'validation Loss': bce_loss + dice_loss,\n            'validation IoU Score': iou_score,\n            'images': wandb.Image(images[0].cpu()),\n            'masks': {\n                'true': wandb.Image(mask_true[0].float().cpu()),\n                'pred': wandb.Image(mask_pred[0].float().cpu()),\n            },\n            **histograms\n        })\n    except Exception as e:\n        print(e)\n        pass\n    \n    return (dice_loss, iou_score)    \n    ","metadata":{"execution":{"iopub.status.busy":"2024-02-18T15:50:49.340163Z","iopub.execute_input":"2024-02-18T15:50:49.341096Z","iopub.status.idle":"2024-02-18T15:50:49.36079Z","shell.execute_reply.started":"2024-02-18T15:50:49.341054Z","shell.execute_reply":"2024-02-18T15:50:49.35974Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import time\nimport torch.optim as optim\nimport segmentation_models_pytorch as smp\n\ndef train(model, device, project,\n          epochs: int = 60,\n          learning_rate: float = 1e-5, \n          weight_decay: float = 1e-8,\n          momentum: float = 0.999,\n          batch_size: int = 6,\n          amp: bool = False,\n          gradient_clipping: float = 1.0):\n    n_train = len(train_data)\n    n_val = len(validate_data)\n\n\n    if isinstance(model, nn.DataParallel):\n        num_classes = model.module.num_classes\n        input_channels = model.module.input_channels\n    else:\n        num_classes = model.num_classes\n        input_channels = model.input_channels\n        \n\n    # (Initialize logging)\n    experiment = wandb.init(project=project, resume='allow', anonymous='must', notes='水平和垂直翻转，旋转(-10,10)度')\n    experiment.config.update(\n        dict(epochs=epochs, batch_size=batch_size, amp=True)\n    )\n    logging.info(f'''Starting training:\n        Epochs:          {epochs}\n        Batch size:      {batch_size}\n        Learning rate:   {learning_rate}\n        Training size:   {n_train}\n        Validation size: {n_val}\n        Device:          {device.type}\n        Mixed Precision: {amp}\n    ''')\n    \n\n    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n    scheduler = optim.lr_scheduler.CosineAnnealingWarmRestarts(optimizer, T_0=1, T_mult=2, eta_min=5e-5)  # goal: maximize Dice scor\n    grad_scaler = torch.cuda.amp.GradScaler(enabled=amp)\n    \n    # 训练过程中，网络最后一层没有添加log，所以要使用带log的损失函数\n    criterion = nn.BCEWithLogitsLoss().cuda()\n    dice_loss = smp.losses.DiceLoss(mode='binary', from_logits=True).cuda()\n\n    global_step = 0\n\n    # 5. Begin training\n    for epoch in range(1, epochs + 1):\n        model.train()\n        epoch_loss = 0\n        with tqdm(total=n_train, desc=f'Epoch {epoch}/{epochs}', unit='batch') as pbar:\n            for batch in trainloader:\n                images, true_masks = batch\n\n                assert images.shape[1] == input_channels, \\\n                    f'Network has been defined with {input_channels} input channels, ' \\\n                    f'but loaded images have {images.shape[1]} channels. Please check that ' \\\n                    'the images are loaded correctly.'\n\n                images = images.to(device=device, dtype=torch.float32, memory_format=torch.channels_last)\n                \n                true_masks = true_masks.to(device=device, dtype=torch.long)\n\n                with torch.autocast(device.type if device.type != 'mps' else 'cpu', enabled=amp):\n                    masks_pred = model(images)\n                    loss = criterion(masks_pred, true_masks.float())\n                    loss += dice_loss(masks_pred, true_masks)\n                    tp, fp, fn, tn = smp.metrics.get_stats(masks_pred, true_masks.long(), mode='binary', threshold=0.5)\n                    iou_score = smp.metrics.iou_score(tp, fp, fn, tn, reduction=\"micro\")\n    \n                optimizer.zero_grad(set_to_none=True)\n                grad_scaler.scale(loss).backward()\n                torch.nn.utils.clip_grad_norm_(model.parameters(), gradient_clipping)\n                grad_scaler.step(optimizer)\n                grad_scaler.update()\n\n                pbar.update(images.shape[0])\n                global_step += 1\n                epoch_loss += loss.item()\n                pbar.set_postfix(**{'loss (batch)': epoch_loss/n_train})\n                if global_step % 10 == 0:\n                    experiment.log({\n                        'learning rate': optimizer.param_groups[0]['lr'],\n                        'train iou': iou_score,\n                        'train loss': loss.item(),\n                        'step': global_step,\n                        'epoch': epoch\n                    })\n                \n\n           # Evaluation round\n                division_step = (n_train // batch_size)\n                if division_step > 0:\n                    if global_step % division_step == 0:\n                        val_score, iou_score = evaluate(model, valloader, device, amp, experiment)\n                        \n                        model.train()\n                        scheduler.step(val_score)\n    experiment.finish()\n","metadata":{"execution":{"iopub.status.busy":"2024-02-18T15:45:45.961386Z","iopub.execute_input":"2024-02-18T15:45:45.962004Z","iopub.status.idle":"2024-02-18T15:45:45.984832Z","shell.execute_reply.started":"2024-02-18T15:45:45.961967Z","shell.execute_reply":"2024-02-18T15:45:45.983936Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"batch_size=8\ndataset =  APODataSet(img_dir = \"/kaggle/input/dltrack/apo_images\",\n                      mask_dir = \"/kaggle/input/dltrack/apo_masks\",\n                     size = [512, 512])\ntotal = len(dataset)\ntrain_size = int(0.8*total)\nvalidate_size = total - train_size\ntrain_data, validate_data = random_split(dataset, [train_size, validate_size])\nprint(\"dataset info\\ntotal: {}, train_size: {}, validate_size: {}\".format(total, len(train_data), len(validate_data)))\ntrainloader = DataLoader(dataset=train_data,\n                                     batch_size=batch_size,\n                                     num_workers=0,\n                                     shuffle=True)\nvalloader = DataLoader(dataset=validate_data,\n                                    batch_size=1, \n                                    num_workers=0, \n                                    shuffle=False)","metadata":{"execution":{"iopub.status.busy":"2024-02-18T15:45:45.986251Z","iopub.execute_input":"2024-02-18T15:45:45.986953Z","iopub.status.idle":"2024-02-18T15:45:47.137141Z","shell.execute_reply.started":"2024-02-18T15:45:45.986914Z","shell.execute_reply":"2024-02-18T15:45:47.136064Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 随机显示一张原始图片和其对应的标记图片","metadata":{}},{"cell_type":"code","source":"idx = random.randint(0, len(dataset))\norig_img, mask_img = dataset[idx]\n\nprint(orig_img.size())\nprint(mask_img.size())\n\n\nprint(\"showing image of {}: \".format(idx))\n\norig_img = orig_img.cpu().numpy().transpose(1, 2, 0)\nmask_img = mask_img.cpu().numpy().transpose(1, 2, 0)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize = (15, 12))\n\nax1.imshow(orig_img)\nax1.grid(False)\nax1.axis('off')\nax1.set_title(\"origin_img\")\n\nax2.imshow(mask_img, cmap=\"gray\")\nax2.grid(False)\nax2.axis('off')\nax2.set_title(\"mask_img\")\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-02-18T15:45:47.14607Z","iopub.execute_input":"2024-02-18T15:45:47.146499Z","iopub.status.idle":"2024-02-18T15:45:47.479941Z","shell.execute_reply.started":"2024-02-18T15:45:47.146461Z","shell.execute_reply":"2024-02-18T15:45:47.478874Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 模型训练","metadata":{}},{"cell_type":"code","source":"os.environ['WANDB_API_KEY']='d561f1229ba7c4e207ca34042f29a43552a7447e'\n!wandb login","metadata":{"execution":{"iopub.status.busy":"2024-02-18T15:45:47.481357Z","iopub.execute_input":"2024-02-18T15:45:47.481665Z","iopub.status.idle":"2024-02-18T15:45:50.416049Z","shell.execute_reply.started":"2024-02-18T15:45:47.481636Z","shell.execute_reply":"2024-02-18T15:45:50.414893Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"epochs=100\nif __name__ == '__main__':\n    model = UNext(n_channels=3, num_classes=1, bilinear=False)\n    \n    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n    if torch.cuda.device_count() > 1:\n        print(\"Let's use\", torch.cuda.device_count(), \"GPUs!\")\n        model = nn.DataParallel(model)\n\n    model = model.to(memory_format=torch.channels_last)\n    model.to(device)\n    total_params = sum(p.numel() for p in model.parameters())\n    print(f\"模型参数量为：{total_params}\")\n    print(\"其详情为：\")\n    for name,parameters in model.named_parameters():\n        print(name,':',parameters.size())\n    train(model, device, project=\"nospp-U-Next\", epochs=epochs, batch_size=batch_size)","metadata":{"execution":{"iopub.status.busy":"2024-02-18T15:50:54.203362Z","iopub.execute_input":"2024-02-18T15:50:54.204015Z","iopub.status.idle":"2024-02-18T15:52:43.20617Z","shell.execute_reply.started":"2024-02-18T15:50:54.203976Z","shell.execute_reply":"2024-02-18T15:52:43.204669Z"},"trusted":true},"execution_count":null,"outputs":[]}]}
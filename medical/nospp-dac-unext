{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/chenshu321/spp-dac-unext?scriptVersionId=163330071\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","id":"3cb54395","metadata":{"papermill":{"duration":0.008531,"end_time":"2024-02-18T17:08:23.337426","exception":false,"start_time":"2024-02-18T17:08:23.328895","status":"completed"},"tags":[]},"source":["# 无spp模块的 DAC-SCCONV-UNEXT \n","> https://github.com/jeya-maria-jose/UNeXt-pytorch"]},{"cell_type":"code","execution_count":1,"id":"1383010b","metadata":{"_cell_guid":"1b772f0f-3a0c-4b91-b596-998d2e0fddd9","_uuid":"2a78186a-a663-4493-a796-33b0f558bf7a","collapsed":false,"execution":{"iopub.execute_input":"2024-02-18T17:08:23.353144Z","iopub.status.busy":"2024-02-18T17:08:23.352815Z","iopub.status.idle":"2024-02-18T17:08:23.371933Z","shell.execute_reply":"2024-02-18T17:08:23.371268Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.029246,"end_time":"2024-02-18T17:08:23.374003","exception":false,"start_time":"2024-02-18T17:08:23.344757","status":"completed"},"tags":[]},"outputs":[],"source":["%config Completer.use_jedi = False"]},{"cell_type":"markdown","id":"1ade6427","metadata":{"papermill":{"duration":0.007003,"end_time":"2024-02-18T17:08:23.388052","exception":false,"start_time":"2024-02-18T17:08:23.381049","status":"completed"},"tags":[]},"source":["## 引入依赖包"]},{"cell_type":"code","execution_count":2,"id":"c33fcdff","metadata":{"execution":{"iopub.execute_input":"2024-02-18T17:08:23.403387Z","iopub.status.busy":"2024-02-18T17:08:23.403093Z","iopub.status.idle":"2024-02-18T17:08:52.053697Z","shell.execute_reply":"2024-02-18T17:08:52.052654Z"},"papermill":{"duration":28.660979,"end_time":"2024-02-18T17:08:52.056165","exception":false,"start_time":"2024-02-18T17:08:23.395186","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: scipy in /opt/conda/lib/python3.7/site-packages (1.7.3)\r\n","Requirement already satisfied: scikit-image in /opt/conda/lib/python3.7/site-packages (0.19.3)\r\n","Requirement already satisfied: torch in /opt/conda/lib/python3.7/site-packages (1.11.0)\r\n","Requirement already satisfied: torchvision in /opt/conda/lib/python3.7/site-packages (0.12.0)\r\n","Collecting pathlib\r\n","  Downloading pathlib-1.0.1-py3-none-any.whl (14 kB)\r\n","Requirement already satisfied: wandb in /opt/conda/lib/python3.7/site-packages (0.12.21)\r\n","Collecting segmentation-models-pytorch\r\n","  Downloading segmentation_models_pytorch-0.3.3-py3-none-any.whl (106 kB)\r\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m106.7/106.7 kB\u001b[0m \u001b[31m4.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[?25hRequirement already satisfied: numpy<1.23.0,>=1.16.5 in /opt/conda/lib/python3.7/site-packages (from scipy) (1.21.6)\r\n","Requirement already satisfied: networkx>=2.2 in /opt/conda/lib/python3.7/site-packages (from scikit-image) (2.5)\r\n","Requirement already satisfied: PyWavelets>=1.1.1 in /opt/conda/lib/python3.7/site-packages (from scikit-image) (1.3.0)\r\n","Requirement already satisfied: pillow!=7.1.0,!=7.1.1,!=8.3.0,>=6.1.0 in /opt/conda/lib/python3.7/site-packages (from scikit-image) (9.1.1)\r\n","Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.7/site-packages (from scikit-image) (21.3)\r\n","Requirement already satisfied: tifffile>=2019.7.26 in /opt/conda/lib/python3.7/site-packages (from scikit-image) (2021.11.2)\r\n","Requirement already satisfied: imageio>=2.4.1 in /opt/conda/lib/python3.7/site-packages (from scikit-image) (2.19.3)\r\n","Requirement already satisfied: typing-extensions in /opt/conda/lib/python3.7/site-packages (from torch) (4.3.0)\r\n","Requirement already satisfied: requests in /opt/conda/lib/python3.7/site-packages (from torchvision) (2.28.1)\r\n","Requirement already satisfied: PyYAML in /opt/conda/lib/python3.7/site-packages (from wandb) (6.0)\r\n","Requirement already satisfied: setuptools in /opt/conda/lib/python3.7/site-packages (from wandb) (59.8.0)\r\n","Requirement already satisfied: promise<3,>=2.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (2.3)\r\n","Requirement already satisfied: sentry-sdk>=1.0.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (1.9.5)\r\n","Requirement already satisfied: setproctitle in /opt/conda/lib/python3.7/site-packages (from wandb) (1.3.2)\r\n","Requirement already satisfied: GitPython>=1.0.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (3.1.27)\r\n","Requirement already satisfied: shortuuid>=0.5.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (1.0.9)\r\n","Requirement already satisfied: psutil>=5.0.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (5.9.1)\r\n","Requirement already satisfied: docker-pycreds>=0.4.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (0.4.0)\r\n","Requirement already satisfied: protobuf<4.0dev,>=3.12.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (3.19.4)\r\n","Requirement already satisfied: Click!=8.0.0,>=7.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (8.0.4)\r\n","Requirement already satisfied: pathtools in /opt/conda/lib/python3.7/site-packages (from wandb) (0.1.2)\r\n","Requirement already satisfied: six>=1.13.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (1.15.0)\r\n","Collecting efficientnet-pytorch==0.7.1\r\n","  Downloading efficientnet_pytorch-0.7.1.tar.gz (21 kB)\r\n","  Preparing metadata (setup.py) ... \u001b[?25l-\b \bdone\r\n","\u001b[?25hCollecting timm==0.9.2\r\n","  Downloading timm-0.9.2-py3-none-any.whl (2.2 MB)\r\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.2/2.2 MB\u001b[0m \u001b[31m49.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[?25hCollecting pretrainedmodels==0.7.4\r\n","  Downloading pretrainedmodels-0.7.4.tar.gz (58 kB)\r\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m58.8/58.8 kB\u001b[0m \u001b[31m6.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l-\b \bdone\r\n","\u001b[?25hRequirement already satisfied: tqdm in /opt/conda/lib/python3.7/site-packages (from segmentation-models-pytorch) (4.64.0)\r\n","Requirement already satisfied: munch in /opt/conda/lib/python3.7/site-packages (from pretrainedmodels==0.7.4->segmentation-models-pytorch) (2.5.0)\r\n","Collecting safetensors\r\n","  Downloading safetensors-0.4.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)\r\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m63.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[?25hRequirement already satisfied: huggingface-hub in /opt/conda/lib/python3.7/site-packages (from timm==0.9.2->segmentation-models-pytorch) (0.8.1)\r\n","Requirement already satisfied: importlib-metadata in /opt/conda/lib/python3.7/site-packages (from Click!=8.0.0,>=7.0->wandb) (4.12.0)\r\n","Requirement already satisfied: gitdb<5,>=4.0.1 in /opt/conda/lib/python3.7/site-packages (from GitPython>=1.0.0->wandb) (4.0.9)\r\n","Requirement already satisfied: decorator>=4.3.0 in /opt/conda/lib/python3.7/site-packages (from networkx>=2.2->scikit-image) (5.1.1)\r\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.7/site-packages (from packaging>=20.0->scikit-image) (3.0.9)\r\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /opt/conda/lib/python3.7/site-packages (from requests->torchvision) (1.26.12)\r\n","Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.7/site-packages (from requests->torchvision) (3.3)\r\n","Requirement already satisfied: charset-normalizer<3,>=2 in /opt/conda/lib/python3.7/site-packages (from requests->torchvision) (2.1.0)\r\n","Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.7/site-packages (from requests->torchvision) (2022.6.15)\r\n","Requirement already satisfied: smmap<6,>=3.0.1 in /opt/conda/lib/python3.7/site-packages (from gitdb<5,>=4.0.1->GitPython>=1.0.0->wandb) (3.0.5)\r\n","Requirement already satisfied: filelock in /opt/conda/lib/python3.7/site-packages (from huggingface-hub->timm==0.9.2->segmentation-models-pytorch) (3.7.1)\r\n","Requirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.7/site-packages (from importlib-metadata->Click!=8.0.0,>=7.0->wandb) (3.8.0)\r\n","Building wheels for collected packages: efficientnet-pytorch, pretrainedmodels\r\n","  Building wheel for efficientnet-pytorch (setup.py) ... \u001b[?25l-\b \b\\\b \bdone\r\n","\u001b[?25h  Created wheel for efficientnet-pytorch: filename=efficientnet_pytorch-0.7.1-py3-none-any.whl size=16446 sha256=e46273ab4084f8e728601a7a70bc762a3fd56d564a2246680e5f15d19c44b1b6\r\n","  Stored in directory: /root/.cache/pip/wheels/0e/cc/b2/49e74588263573ff778da58cc99b9c6349b496636a7e165be6\r\n","  Building wheel for pretrainedmodels (setup.py) ... \u001b[?25l-\b \b\\\b \bdone\r\n","\u001b[?25h  Created wheel for pretrainedmodels: filename=pretrainedmodels-0.7.4-py3-none-any.whl size=60965 sha256=bd2643825c1dddfbcfac8cc6e3dc0e49572e965c8aad0f3b3b3cf76f1bf8c11b\r\n","  Stored in directory: /root/.cache/pip/wheels/ed/27/e8/9543d42de2740d3544db96aefef63bda3f2c1761b3334f4873\r\n","Successfully built efficientnet-pytorch pretrainedmodels\r\n","Installing collected packages: pathlib, safetensors, efficientnet-pytorch, timm, pretrainedmodels, segmentation-models-pytorch\r\n","Successfully installed efficientnet-pytorch-0.7.1 pathlib-1.0.1 pretrainedmodels-0.7.4 safetensors-0.4.2 segmentation-models-pytorch-0.3.3 timm-0.9.2\r\n","\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\r\n","\u001b[0mRequirement already satisfied: wandb in /opt/conda/lib/python3.7/site-packages (0.12.21)\r\n","Requirement already satisfied: protobuf<4.0dev,>=3.12.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (3.19.4)\r\n","Requirement already satisfied: docker-pycreds>=0.4.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (0.4.0)\r\n","Requirement already satisfied: PyYAML in /opt/conda/lib/python3.7/site-packages (from wandb) (6.0)\r\n","Requirement already satisfied: pathtools in /opt/conda/lib/python3.7/site-packages (from wandb) (0.1.2)\r\n","Requirement already satisfied: shortuuid>=0.5.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (1.0.9)\r\n","Requirement already satisfied: psutil>=5.0.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (5.9.1)\r\n","Requirement already satisfied: sentry-sdk>=1.0.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (1.9.5)\r\n","Requirement already satisfied: requests<3,>=2.0.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (2.28.1)\r\n","Requirement already satisfied: promise<3,>=2.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (2.3)\r\n","Requirement already satisfied: six>=1.13.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (1.15.0)\r\n","Requirement already satisfied: Click!=8.0.0,>=7.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (8.0.4)\r\n","Requirement already satisfied: setproctitle in /opt/conda/lib/python3.7/site-packages (from wandb) (1.3.2)\r\n","Requirement already satisfied: GitPython>=1.0.0 in /opt/conda/lib/python3.7/site-packages (from wandb) (3.1.27)\r\n","Requirement already satisfied: setuptools in /opt/conda/lib/python3.7/site-packages (from wandb) (59.8.0)\r\n","Requirement already satisfied: importlib-metadata in /opt/conda/lib/python3.7/site-packages (from Click!=8.0.0,>=7.0->wandb) (4.12.0)\r\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.7/site-packages (from GitPython>=1.0.0->wandb) (4.3.0)\r\n","Requirement already satisfied: gitdb<5,>=4.0.1 in /opt/conda/lib/python3.7/site-packages (from GitPython>=1.0.0->wandb) (4.0.9)\r\n","Requirement already satisfied: charset-normalizer<3,>=2 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.0.0->wandb) (2.1.0)\r\n","Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.0.0->wandb) (2022.6.15)\r\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.0.0->wandb) (1.26.12)\r\n","Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.7/site-packages (from requests<3,>=2.0.0->wandb) (3.3)\r\n","Requirement already satisfied: smmap<6,>=3.0.1 in /opt/conda/lib/python3.7/site-packages (from gitdb<5,>=4.0.1->GitPython>=1.0.0->wandb) (3.0.5)\r\n","Requirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.7/site-packages (from importlib-metadata->Click!=8.0.0,>=7.0->wandb) (3.8.0)\r\n","\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\r\n","\u001b[0m"]}],"source":["!pip install scipy scikit-image torch torchvision pathlib wandb segmentation-models-pytorch\n","!pip install wandb"]},{"cell_type":"code","execution_count":3,"id":"bb766c12","metadata":{"execution":{"iopub.execute_input":"2024-02-18T17:08:52.079126Z","iopub.status.busy":"2024-02-18T17:08:52.078461Z","iopub.status.idle":"2024-02-18T17:08:54.555794Z","shell.execute_reply":"2024-02-18T17:08:54.55478Z"},"papermill":{"duration":2.491189,"end_time":"2024-02-18T17:08:54.55837","exception":false,"start_time":"2024-02-18T17:08:52.067181","status":"completed"},"tags":[]},"outputs":[],"source":["import os\n","import random\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","plt.style.use(\"ggplot\")\n","%matplotlib inline\n","\n","import torch\n","import torch.nn as nn\n","from torchvision import models, transforms\n","from torch.nn.functional import relu, pad\n","from torch.utils.data import Dataset, DataLoader, random_split\n","\n","from PIL import Image\n","from typing import Tuple\n","from pathlib import Path\n","\n","import torch\n","from torch import nn, Tensor\n","import torch.nn.functional as F\n","import torch.optim as optim\n","\n","from tqdm import tqdm\n","import wandb\n","import logging"]},{"cell_type":"markdown","id":"a95e2a44","metadata":{"papermill":{"duration":0.009743,"end_time":"2024-02-18T17:08:54.578743","exception":false,"start_time":"2024-02-18T17:08:54.569","status":"completed"},"tags":[]},"source":["## 设置wandb账号\n","用作统计与数据分析"]},{"cell_type":"markdown","id":"e965f319","metadata":{"papermill":{"duration":0.009724,"end_time":"2024-02-18T17:08:54.59837","exception":false,"start_time":"2024-02-18T17:08:54.588646","status":"completed"},"tags":[]},"source":["## ScConv\n","> https://github.com/XxxxYi/Reproduction_of_ScConv_CVPR2023/blob/main/scconv.py"]},{"cell_type":"code","execution_count":4,"id":"e836ef66","metadata":{"execution":{"iopub.execute_input":"2024-02-18T17:08:54.620397Z","iopub.status.busy":"2024-02-18T17:08:54.619669Z","iopub.status.idle":"2024-02-18T17:08:54.654377Z","shell.execute_reply":"2024-02-18T17:08:54.653666Z"},"papermill":{"duration":0.04802,"end_time":"2024-02-18T17:08:54.65636","exception":false,"start_time":"2024-02-18T17:08:54.60834","status":"completed"},"tags":[]},"outputs":[],"source":["\n","\n","class GroupNorm2d(nn.Module):\n","\n","    def __init__(self, n_groups: int = 16, n_channels: int = 16, eps: float = 1e-10):\n","        super(GroupNorm2d, self).__init__()  \n","        assert n_channels % n_groups == 0 \n","        self.n_groups = n_groups  \n","        self.gamma = nn.Parameter(torch.randn(n_channels, 1, 1))  # learnable gamma\n","        self.beta = nn.Parameter(torch.zeros(n_channels, 1, 1))  # learnable beta\n","        self.eps = eps \n","\n","    def forward(self, x):\n","        N, C, H, W = x.size()\n","        x = x.reshape(N, self.n_groups, -1) \n","        mean = x.mean(dim=2, keepdim=True)  \n","        std = x.std(dim=2, keepdim=True)\n","        x = (x - mean) / (std + self.eps) \n","        x = x.reshape(N, C, H, W)  \n","        return x * self.gamma + self.beta  \n","\n","\n","# Spatial and Reconstruct Unit\n","class SRU(nn.Module):\n","\n","    def __init__(\n","            self,\n","            n_channels: int,  # in_channels\n","            n_groups: int = 16,  # 16\n","            gate_treshold: float = 0.5,  # 0.5,\n","            torch_gn:bool = True\n","    ):\n","        super().__init__()  \n","\n","        # initialize GroupNorm2d\n","        self.gn = nn.GroupNorm( num_channels = n_channels, num_groups = n_groups ) if torch_gn else GroupNorm2d(n_channels = n_channels, n_groups = n_groups)\n","        # self.gn = GroupNorm2d(n_groups=n_groups, n_channels=n_channels)\n","        self.gate_treshold = gate_treshold  \n","        self.sigomid = nn.Sigmoid()  \n","\n","    def forward(self, x):\n","        gn_x = self.gn(x) \n","        w_gamma = self.gn.gamma / sum(self.gn.gamma)  # cal gamma weight\n","        reweights = self.sigomid(gn_x * w_gamma)  # importance\n","\n","        info_mask = reweights >= self.gate_treshold\n","        noninfo_mask = reweights < self.gate_treshold\n","        x_1 = info_mask * x  \n","        x_2 = noninfo_mask * x  \n","        x = self.reconstruct(x_1, x_2) \n","        return x\n","\n","    def reconstruct(self, x_1, x_2):\n","        x_11, x_12 = torch.split(x_1, x_1.size(1) // 2, dim=1)\n","        x_21, x_22 = torch.split(x_2, x_2.size(1) // 2, dim=1)\n","        return torch.cat([x_11 + x_22, x_12 + x_21], dim=1)\n","\n","\n","# Channel Reduction Unit\n","class CRU(nn.Module):\n","\n","    def __init__(self, in_channels: int, out_channels: int, kernel_size: int = 3, alpha: float = 1 / 2, squeeze_radio: int = 2, groups: int = 2):\n","        super().__init__()\n","\n","        self.up_channel = up_channel = int(alpha * in_channels)\n","        self.low_channel = low_channel = in_channels - up_channel\n","        self.squeeze1 = nn.Conv2d(up_channel, up_channel // squeeze_radio, kernel_size=1, bias=False)\n","        self.squeeze2 = nn.Conv2d(low_channel, low_channel // squeeze_radio, kernel_size=1, bias=False)\n","\n","        in_ch = up_channel // squeeze_radio\n","        out_ch = out_channels\n","        print(\"out_channels:\", out_channels, \"squeeze_radio: \", squeeze_radio, \"up_channel: \",up_channel,\"in_ch (out_channels // squeeze_radio): \", in_ch, \"out_ch(out_channels):\", out_ch)\n","        \n","        \n","        if in_ch >= 16:\n","            groups = 16\n","    \n","        self.GWC = nn.Conv2d(in_ch, out_channels, kernel_size=kernel_size, stride=1, padding=kernel_size // 2, groups=groups) \n","        self.PWC1 = nn.Conv2d(in_ch, out_channels, kernel_size=1, bias=False)\n","\n","        print(\"in_ch: \", in_ch, \"out_channels: \", out_channels,\"groups: \",groups)\n","        print(\"up_channel: \", self.up_channel, \"low_channel: \", self.low_channel)\n","        in_ch = low_channel // squeeze_radio\n","        out_ch = out_channels - low_channel // squeeze_radio\n","        print(\"out_channels:\", out_channels, \"squeeze_radio: \", squeeze_radio, \"low_channel: \",low_channel,\"in_ch (low_channel // squeeze_radio): \", in_ch, \"out_ch(out_channels - low_channel // squeeze_radio):\", out_ch)\n","        self.PWC2 = nn.Conv2d(in_ch, out_ch, kernel_size=1, bias=False) \n","        #print(\"self.PWC2.weight.shape: \",self.PWC2.weight.shape)\n","        self.pool = nn.AdaptiveAvgPool2d(1)  \n","        \n","    def forward(self, x):\n","\n","        up, low = torch.split(x, [self.up_channel, self.low_channel], dim=1)\n","        up, low = self.squeeze1(up), self.squeeze2(low)\n","\n","        y1 = self.GWC(up) + self.PWC1(up)\n","        \n","        #print(\"low: \",low.shape)\n","        pwc2 = self.PWC2(low)\n","        #print(\"pwc2\", pwc2.shape)\n","        y2 = torch.cat([pwc2, low], dim=1)\n","\n","        s1 = self.pool(y1)\n","        s2 = self.pool(y2)\n","        s = torch.cat([s1, s2], dim=1)\n","        beta = F.softmax(s, dim=1)\n","        beta1, beta2 = torch.split(beta, beta.size(1) // 2, dim=1)\n","        y = beta1 * y1 + beta2 * y2\n","        return y\n","\n","\n","# Squeeze and Channel Reduction Convolution\n","class ScConv(nn.Module):\n","\n","    def __init__(self, in_channels: int, out_channels: int, kernel_size: int = 3, stride: int = 1, padding: int = 1, n_groups: int = 2, gate_treshold: float = 0.5, alpha: float = 1 / 2, squeeze_radio: int = 2, groups: int = 2):\n","        super().__init__()\n","\n","        self.SRU = SRU(in_channels, n_groups=n_groups, gate_treshold=gate_treshold, torch_gn=False) \n","        self.CRU = CRU(in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, alpha=alpha, squeeze_radio=squeeze_radio, groups=groups)\n","\n","    def forward(self, x):\n","        x = self.SRU(x)  \n","        x = self.CRU(x) \n","        return x\n","\n","\n"]},{"cell_type":"markdown","id":"1ce8cb91","metadata":{"papermill":{"duration":0.009718,"end_time":"2024-02-18T17:08:54.677022","exception":false,"start_time":"2024-02-18T17:08:54.667304","status":"completed"},"tags":[]},"source":["CE-NET中DAC模块"]},{"cell_type":"code","execution_count":5,"id":"84249a8d","metadata":{"execution":{"iopub.execute_input":"2024-02-18T17:08:54.698044Z","iopub.status.busy":"2024-02-18T17:08:54.697781Z","iopub.status.idle":"2024-02-18T17:08:54.716151Z","shell.execute_reply":"2024-02-18T17:08:54.715471Z"},"papermill":{"duration":0.031189,"end_time":"2024-02-18T17:08:54.718141","exception":false,"start_time":"2024-02-18T17:08:54.686952","status":"completed"},"tags":[]},"outputs":[],"source":["from functools import partial\n","\n","nonlinearity = partial(F.relu, inplace=True)\n","\n","class DACblock(nn.Module):\n","    def __init__(self, channel):\n","        super(DACblock, self).__init__()\n","        self.dilate1 = nn.Conv2d(channel, channel, kernel_size=3, dilation=1, padding=1)\n","        self.dilate2 = nn.Conv2d(channel, channel, kernel_size=3, dilation=3, padding=3)\n","        self.dilate3 = nn.Conv2d(channel, channel, kernel_size=3, dilation=5, padding=5)\n","        self.conv1x1 = nn.Conv2d(channel, channel, kernel_size=1, dilation=1, padding=0)\n","        for m in self.modules():\n","            if isinstance(m, nn.Conv2d) or isinstance(m, nn.ConvTranspose2d):\n","                if m.bias is not None:\n","                    m.bias.data.zero_()\n","\n","    def forward(self, x):\n","        dilate1_out = nonlinearity(self.dilate1(x))\n","        dilate2_out = nonlinearity(self.conv1x1(self.dilate2(x)))\n","        dilate3_out = nonlinearity(self.conv1x1(self.dilate2(self.dilate1(x))))\n","        dilate4_out = nonlinearity(self.conv1x1(self.dilate3(self.dilate2(self.dilate1(x)))))\n","        out = x + dilate1_out + dilate2_out + dilate3_out + dilate4_out\n","        return out\n","\n","class SPPblock(nn.Module):\n","    def __init__(self, in_channels):\n","            super(SPPblock, self).__init__()\n","            self.pool1 = nn.MaxPool2d(kernel_size=[2, 2], stride=2)\n","            self.pool2 = nn.MaxPool2d(kernel_size=[3, 3], stride=3)\n","            self.pool3 = nn.MaxPool2d(kernel_size=[5, 5], stride=5)\n","            self.pool4 = nn.MaxPool2d(kernel_size=[6, 6], stride=6)\n","\n","            self.conv = nn.Conv2d(in_channels=in_channels, out_channels=1, kernel_size=1, padding=0)\n","\n","    def forward(self, x):\n","        self.in_channels, h, w = x.size(1), x.size(2), x.size(3)\n","        self.layer1 = F.upsample(self.conv(self.pool1(x)), size=(h, w), mode='bilinear')\n","        self.layer2 = F.upsample(self.conv(self.pool2(x)), size=(h, w), mode='bilinear')\n","        self.layer3 = F.upsample(self.conv(self.pool3(x)), size=(h, w), mode='bilinear')\n","        self.layer4 = F.upsample(self.conv(self.pool4(x)), size=(h, w), mode='bilinear')\n","\n","        out = torch.cat([self.layer1, self.layer2, self.layer3, self.layer4, x], 1)\n","\n","        return out\n"]},{"cell_type":"code","execution_count":6,"id":"3f523bb9","metadata":{"execution":{"iopub.execute_input":"2024-02-18T17:08:54.739877Z","iopub.status.busy":"2024-02-18T17:08:54.7396Z","iopub.status.idle":"2024-02-18T17:08:55.206671Z","shell.execute_reply":"2024-02-18T17:08:55.205646Z"},"papermill":{"duration":0.481053,"end_time":"2024-02-18T17:08:55.209156","exception":false,"start_time":"2024-02-18T17:08:54.728103","status":"completed"},"tags":[]},"outputs":[],"source":["import torch\n","from torch import nn\n","import torch\n","import torchvision\n","from torch import nn\n","from torch.autograd import Variable\n","from torch.utils.data import DataLoader\n","from torchvision import transforms\n","from torchvision.utils import save_image\n","import torch.nn.functional as F\n","import os\n","import matplotlib.pyplot as plt\n","# from utils import *\n","\n","import timm\n","from timm.models.layers import DropPath, to_2tuple, trunc_normal_\n","import types\n","import math\n","from abc import ABCMeta, abstractmethod\n","# from mmcv.cnn import ConvModule\n","import pdb\n","\n","\n","\n","# def conv1x1(in_planes: int, out_planes: int, stride: int = 1) -> nn.Conv2d:\n","#     \"\"\"1x1 convolution\"\"\"\n","#     return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=1, bias=False)\n","\n","\n","def shift(dim):\n","            x_shift = [ torch.roll(x_c, shift, dim) for x_c, shift in zip(xs, range(-self.pad, self.pad+1))]\n","            x_cat = torch.cat(x_shift, 1)\n","            x_cat = torch.narrow(x_cat, 2, self.pad, H)\n","            x_cat = torch.narrow(x_cat, 3, self.pad, W)\n","            return x_cat\n","\n","class shiftmlp(nn.Module):\n","    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0., shift_size=5):\n","        super().__init__()\n","        out_features = out_features or in_features\n","        hidden_features = hidden_features or in_features\n","        self.dim = in_features\n","        self.fc1 = nn.Linear(in_features, hidden_features)\n","        self.dwconv = DWConv(hidden_features)\n","        self.act = act_layer()\n","        self.fc2 = nn.Linear(hidden_features, out_features)\n","        self.drop = nn.Dropout(drop)\n","\n","        self.shift_size = shift_size\n","        self.pad = shift_size // 2\n","\n","        \n","        self.apply(self._init_weights)\n","\n","    def _init_weights(self, m):\n","        if isinstance(m, nn.Linear):\n","            trunc_normal_(m.weight, std=.02)\n","            if isinstance(m, nn.Linear) and m.bias is not None:\n","                nn.init.constant_(m.bias, 0)\n","        elif isinstance(m, nn.LayerNorm):\n","            nn.init.constant_(m.bias, 0)\n","            nn.init.constant_(m.weight, 1.0)\n","        elif isinstance(m, nn.Conv2d):\n","            fan_out = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\n","            fan_out //= m.groups\n","            m.weight.data.normal_(0, math.sqrt(2.0 / fan_out))\n","            if m.bias is not None:\n","                m.bias.data.zero_()\n","    \n","#     def shift(x, dim):\n","#         x = F.pad(x, \"constant\", 0)\n","#         x = torch.chunk(x, shift_size, 1)\n","#         x = [ torch.roll(x_c, shift, dim) for x_s, shift in zip(x, range(-pad, pad+1))]\n","#         x = torch.cat(x, 1)\n","#         return x[:, :, pad:-pad, pad:-pad]\n","\n","    def forward(self, x, H, W):\n","        # pdb.set_trace()\n","        B, N, C = x.shape\n","\n","        xn = x.transpose(1, 2).view(B, C, H, W).contiguous()\n","        xn = F.pad(xn, (self.pad, self.pad, self.pad, self.pad) , \"constant\", 0)\n","        xs = torch.chunk(xn, self.shift_size, 1)\n","        x_shift = [torch.roll(x_c, shift, 2) for x_c, shift in zip(xs, range(-self.pad, self.pad+1))]\n","        x_cat = torch.cat(x_shift, 1)\n","        x_cat = torch.narrow(x_cat, 2, self.pad, H)\n","        x_s = torch.narrow(x_cat, 3, self.pad, W)\n","\n","\n","        x_s = x_s.reshape(B,C,H*W).contiguous()\n","        x_shift_r = x_s.transpose(1,2)\n","\n","\n","        x = self.fc1(x_shift_r)\n","\n","        x = self.dwconv(x, H, W)\n","        x = self.act(x) \n","        x = self.drop(x)\n","\n","        xn = x.transpose(1, 2).view(B, C, H, W).contiguous()\n","        xn = F.pad(xn, (self.pad, self.pad, self.pad, self.pad) , \"constant\", 0)\n","        xs = torch.chunk(xn, self.shift_size, 1)\n","        x_shift = [torch.roll(x_c, shift, 3) for x_c, shift in zip(xs, range(-self.pad, self.pad+1))]\n","        x_cat = torch.cat(x_shift, 1)\n","        x_cat = torch.narrow(x_cat, 2, self.pad, H)\n","        x_s = torch.narrow(x_cat, 3, self.pad, W)\n","        x_s = x_s.reshape(B,C,H*W).contiguous()\n","        x_shift_c = x_s.transpose(1,2)\n","\n","        x = self.fc2(x_shift_c)\n","        x = self.drop(x)\n","        return x\n","\n","\n","\n","class shiftedBlock(nn.Module):\n","    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,\n","                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm, sr_ratio=1):\n","        super().__init__()\n","\n","\n","        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()\n","        self.norm2 = norm_layer(dim)\n","        mlp_hidden_dim = int(dim * mlp_ratio)\n","        self.mlp = shiftmlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)\n","        self.apply(self._init_weights)\n","\n","    def _init_weights(self, m):\n","        if isinstance(m, nn.Linear):\n","            trunc_normal_(m.weight, std=.02)\n","            if isinstance(m, nn.Linear) and m.bias is not None:\n","                nn.init.constant_(m.bias, 0)\n","        elif isinstance(m, nn.LayerNorm):\n","            nn.init.constant_(m.bias, 0)\n","            nn.init.constant_(m.weight, 1.0)\n","        elif isinstance(m, nn.Conv2d):\n","            fan_out = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\n","            fan_out //= m.groups\n","            m.weight.data.normal_(0, math.sqrt(2.0 / fan_out))\n","            if m.bias is not None:\n","                m.bias.data.zero_()\n","\n","    def forward(self, x, H, W):\n","\n","        x = x + self.drop_path(self.mlp(self.norm2(x), H, W))\n","        return x\n","\n","\n","class DWConv(nn.Module):\n","    def __init__(self, dim=768):\n","        super(DWConv, self).__init__()\n","        self.dwconv = nn.Conv2d(dim, dim, 3, 1, 1, bias=True, groups=dim)\n","\n","    def forward(self, x, H, W):\n","        B, N, C = x.shape\n","        x = x.transpose(1, 2).view(B, C, H, W)\n","        x = self.dwconv(x)\n","        x = x.flatten(2).transpose(1, 2)\n","\n","        return x\n","\n","class OverlapPatchEmbed(nn.Module):\n","    \"\"\" Image to Patch Embedding\n","    \"\"\"\n","\n","    def __init__(self, img_size=224, patch_size=7, stride=4, in_chans=3, embed_dim=768):\n","        super().__init__()\n","        img_size = to_2tuple(img_size)\n","        patch_size = to_2tuple(patch_size)\n","\n","        self.img_size = img_size\n","        self.patch_size = patch_size\n","        self.H, self.W = img_size[0] // patch_size[0], img_size[1] // patch_size[1]\n","        self.num_patches = self.H * self.W\n","        self.proj = nn.Conv2d(in_chans, embed_dim, kernel_size=patch_size, stride=stride,\n","                              padding=(patch_size[0] // 2, patch_size[1] // 2))\n","        self.norm = nn.LayerNorm(embed_dim)\n","\n","        self.apply(self._init_weights)\n","\n","    def _init_weights(self, m):\n","        if isinstance(m, nn.Linear):\n","            trunc_normal_(m.weight, std=.02)\n","            if isinstance(m, nn.Linear) and m.bias is not None:\n","                nn.init.constant_(m.bias, 0)\n","        elif isinstance(m, nn.LayerNorm):\n","            nn.init.constant_(m.bias, 0)\n","            nn.init.constant_(m.weight, 1.0)\n","        elif isinstance(m, nn.Conv2d):\n","            fan_out = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\n","            fan_out //= m.groups\n","            m.weight.data.normal_(0, math.sqrt(2.0 / fan_out))\n","            if m.bias is not None:\n","                m.bias.data.zero_()\n","\n","    def forward(self, x):\n","        x = self.proj(x)\n","        _, _, H, W = x.shape\n","        x = x.flatten(2).transpose(1, 2)\n","        x = self.norm(x)\n","\n","        return x, H, W\n","\n","sigmoid = nn.Sigmoid().cuda()\n","\n","class UNext(nn.Module):\n","\n","    ## Conv 3 + scconv1 + shifted MLP +DAC\n","    \n","    def __init__(self,  num_classes, input_channels=3, deep_supervision=False,img_size=224, patch_size=16, in_chans=3,  embed_dims=[ 256, 512, 512 ],\n","                 num_heads=[1, 2, 4, 8], mlp_ratios=[4, 4, 4, 4], qkv_bias=False, qk_scale=None, drop_rate=0.,\n","                 attn_drop_rate=0., drop_path_rate=0., norm_layer=nn.LayerNorm,\n","                 depths=[1, 1, 1], sr_ratios=[8, 4, 2, 1], **kwargs):\n","        super().__init__()\n","        self.num_classes = num_classes\n","        self.input_channels = input_channels\n","        \n","        self.encoder1 = nn.Conv2d(3, 16, 3, stride=1, padding=1)  \n","        self.encoder2 = nn.Conv2d(16, 32, 3, stride=1, padding=1)  \n","        self.encoder3 = nn.Conv2d(32, 128, 3, stride=1, padding=1)\n","        self.encoder4 = ScConv(128, 256, 3, stride=1, padding=1)\n","\n","        self.ebn1 = nn.BatchNorm2d(16)\n","        self.ebn2 = nn.BatchNorm2d(32)\n","        self.ebn3 = nn.BatchNorm2d(128)\n","        self.ebn4 = nn.BatchNorm2d(256)\n","        \n","        self.norm3 = norm_layer(512)\n","        #self.norm4 = norm_layer(embed_dims[2])\n","\n","#         self.dnorm3 = norm_layer(512)\n","        self.dnorm4 = norm_layer(256)\n","\n","    \n","        \n","        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, sum(depths))]\n","\n","        self.block1 = nn.ModuleList([shiftedBlock(\n","            dim=embed_dims[1], num_heads=num_heads[0], mlp_ratio=1, qkv_bias=qkv_bias, qk_scale=qk_scale,\n","            drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], norm_layer=norm_layer,\n","            sr_ratio=sr_ratios[0])])#256\n","\n","#         self.block2 = nn.ModuleList([shiftedBlock(\n","#             dim=embed_dims[2], num_heads=num_heads[0], mlp_ratio=1, qkv_bias=qkv_bias, qk_scale=qk_scale,\n","#             drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[1], norm_layer=norm_layer,\n","#             sr_ratio=sr_ratios[0])])#512\n","\n","#         self.dblock1 = nn.ModuleList([shiftedBlock(\n","#             dim=embed_dims[1], num_heads=num_heads[0], mlp_ratio=1, qkv_bias=qkv_bias, qk_scale=qk_scale,\n","#             drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], norm_layer=norm_layer,\n","#             sr_ratio=sr_ratios[0])])\n","\n","        self.dblock2 = nn.ModuleList([shiftedBlock(\n","            dim=embed_dims[0], num_heads=num_heads[0], mlp_ratio=1, qkv_bias=qkv_bias, qk_scale=qk_scale,\n","            drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[1], norm_layer=norm_layer,\n","            sr_ratio=sr_ratios[0])])\n","        \n","\n","        self.patch_embed3 = OverlapPatchEmbed(img_size=img_size // 4, patch_size=3, stride=2, in_chans=embed_dims[0],\n","                                              embed_dim=embed_dims[1])#（256，512）\n","        #self.patch_embed4 = OverlapPatchEmbed(img_size=img_size // 8, patch_size=3, stride=2, in_chans=embed_dims[1],\n","        #                                      embed_dim=embed_dims[2])#（256，512）\n","        self.dac = DACblock(512)\n","        #self.spp = SPPblock(512)\n","        #self.conv = nn.Conv2d(516, 512, 1, stride=1)\n","        \n","        self.decoder1 =   nn.Conv2d(512, 256, 3, stride=1,padding=1) \n","        self.decoder2 =   ScConv(256, 128, 3, stride=1, padding=1)  \n","        self.decoder3 =   nn.Conv2d(128, 32, 3, stride=1, padding=1) \n","        self.decoder4 =   nn.Conv2d(32, 16, 3, stride=1, padding=1)\n","        self.decoder5 =   nn.Conv2d(16, 16, 3, stride=1, padding=1)\n","\n","        self.dbn1 = nn.BatchNorm2d(256)\n","        self.dbn2 = nn.BatchNorm2d(128)\n","        self.dbn3 = nn.BatchNorm2d(32)\n","        self.dbn4 = nn.BatchNorm2d(16)\n","        \n","        self.final = nn.Conv2d(16, num_classes, kernel_size=1)\n","\n","\n","\n","    def forward(self, x):\n","        \n","        B = x.shape[0]\n","        ### Encoder\n","        ### Conv Stage\n","\n","        ### Stage 1\n","        out = F.relu(F.max_pool2d(self.ebn1(self.encoder1(x)),2,2))\n","        e1 = out\n","        ### Stage 2\n","        out = F.relu(F.max_pool2d(self.ebn2(self.encoder2(out)),2,2))\n","        e2 = out\n","        ### Stage 3\n","        out = F.relu(F.max_pool2d(self.ebn3(self.encoder3(out)),2,2))\n","        e3 = out\n","        ### Stage 4\n","        out = F.relu(F.max_pool2d(self.ebn4(self.encoder4(out)),2,2))\n","        e4 = out\n","        \n","        \n","        ### Tokenized MLP Stage\n","        ### Stage 5\n","\n","        out,H,W = self.patch_embed3(e4)\n","        for i, blk in enumerate(self.block1):\n","            out = blk(out, H, W)\n","        out = self.norm3(out)\n","        out = out.reshape(B, H, W, -1).permute(0, 3, 1, 2).contiguous()\n","        e5 = out\n","        ### Bottleneck\n","\n","#         out ,H,W= self.patch_embed4(out)\n","#         for i, blk in enumerate(self.block2):\n","#             out = blk(out, H, W)\n","#         out = self.norm4(out)\n","#         out = out.reshape(B, H, W, -1).permute(0, 3, 1, 2).contiguous()\n","        \n","#         out = F.max_pool2d(out,2,2)\n","\n","\n","        out = self.dac(out) \n","        #print(\"DAC=\",out.shape)\n","        #out = self.spp(out)\n","        #print(\"SPP=\",out.shape)\n","        \n","#         out = self.norm4(out)\n","#         out = out.reshape(B, H, W, -1).permute(0, 3, 1, 2).contiguous()\n","\n","        ### Stage 4\n","\n","#         out = F.relu(F.interpolate(self.dbn1(self.decoder1(out)),scale_factor=(2,2),mode ='bilinear'))\n","#         out = self.conv(out)\n","#         out = torch.add(out,e4)\n","#         print(\"outstage4=\",out.shape)\n","        \n","#         _,_,H,W = out.shape\n","#         out = out.flatten(2).transpose(1,2)\n","#         for i, blk in enumerate(self.dblock1):\n","#             out = blk(out, H, W)\n","#         out = self.dnorm3(out)\n","#         out = out.reshape(B, H, W, -1).permute(0, 3, 1, 2).contiguous()\n","        ### Stage 3\n","         \n","        out = F.relu(F.interpolate(self.dbn1(self.decoder1(out)),scale_factor=(2,2),mode ='bilinear'))\n","        out = torch.add(out,e4)\n","        _,_,H,W = out.shape\n","        out = out.flatten(2).transpose(1,2)\n","    \n","        for i, blk in enumerate(self.dblock2):\n","            out = blk(out, H, W)\n","        out = self.dnorm4(out)\n","        out = out.reshape(B, H, W, -1).permute(0, 3, 1, 2).contiguous()\n","        \n","        out = F.relu(F.interpolate(self.dbn2(self.decoder2(out)),scale_factor=(2,2),mode ='bilinear'))\n","        out = torch.add(out,e3)\n","        \n","        out = F.relu(F.interpolate(self.dbn3(self.decoder3(out)),scale_factor=(2,2),mode ='bilinear'))\n","        out = torch.add(out,e2)\n","        \n","        out = F.relu(F.interpolate(self.dbn4(self.decoder4(out)),scale_factor=(2,2),mode ='bilinear'))\n","        out = torch.add(out,e1)\n","    \n","        out = F.relu(F.interpolate(self.decoder5(out),scale_factor=(2,2),mode ='bilinear'))\n","        out = self.final(out)\n","       \n","        # 测试阶段，添加 sigmoid 和阈值过滤\n","        if not self.training:\n","            out = sigmoid(out)\n","            out = torch.where(out>0.5, torch.ones_like(out), torch.zeros_like(out))\n","            \n","        return out\n","\n","\n","# class UNext_S(nn.Module):\n","\n","#     ## Conv 3 + MLP 2 + shifted MLP w less parameters\n","    \n","#     def __init__(self,  num_classes, input_channels=3, deep_supervision=False,img_size=224, patch_size=16, in_chans=3,  embed_dims=[32, 64, 128, 512],\n","#                  num_heads=[1, 2, 4, 8], mlp_ratios=[4, 4, 4, 4], qkv_bias=False, qk_scale=None, drop_rate=0.,\n","#                  attn_drop_rate=0., drop_path_rate=0., norm_layer=nn.LayerNorm,\n","#                  depths=[1, 1, 1], sr_ratios=[8, 4, 2, 1], **kwargs):\n","#         super().__init__()\n","#         self.input_channels = input_channels\n","#         self.num_classes = num_classes\n","#         self.encoder1 = nn.Conv2d(3, 8, 3, stride=1, padding=1)  \n","#         self.encoder2 = nn.Conv2d(8, 16, 3, stride=1, padding=1)  \n","#         self.encoder3 = nn.Conv2d(16, 32, 3, stride=1, padding=1)\n","\n","#         self.ebn1 = nn.BatchNorm2d(8)\n","#         self.ebn2 = nn.BatchNorm2d(16)\n","#         self.ebn3 = nn.BatchNorm2d(32)\n","        \n","#         self.norm3 = norm_layer(embed_dims[1])\n","#         self.norm4 = norm_layer(embed_dims[2])\n","\n","#         self.dnorm3 = norm_layer(64)\n","#         self.dnorm4 = norm_layer(32)\n","\n","#         dpr = [x.item() for x in torch.linspace(0, drop_path_rate, sum(depths))]\n","\n","#         self.block1 = nn.ModuleList([shiftedBlock(\n","#             dim=embed_dims[1], num_heads=num_heads[0], mlp_ratio=1, qkv_bias=qkv_bias, qk_scale=qk_scale,\n","#             drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], norm_layer=norm_layer,\n","#             sr_ratio=sr_ratios[0])])\n","\n","#         self.block2 = nn.ModuleList([shiftedBlock(\n","#             dim=embed_dims[2], num_heads=num_heads[0], mlp_ratio=1, qkv_bias=qkv_bias, qk_scale=qk_scale,\n","#             drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[1], norm_layer=norm_layer,\n","#             sr_ratio=sr_ratios[0])])\n","\n","#         self.dblock1 = nn.ModuleList([shiftedBlock(\n","#             dim=embed_dims[1], num_heads=num_heads[0], mlp_ratio=1, qkv_bias=qkv_bias, qk_scale=qk_scale,\n","#             drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], norm_layer=norm_layer,\n","#             sr_ratio=sr_ratios[0])])\n","\n","#         self.dblock2 = nn.ModuleList([shiftedBlock(\n","#             dim=embed_dims[0], num_heads=num_heads[0], mlp_ratio=1, qkv_bias=qkv_bias, qk_scale=qk_scale,\n","#             drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[1], norm_layer=norm_layer,\n","#             sr_ratio=sr_ratios[0])])\n","\n","#         self.patch_embed3 = OverlapPatchEmbed(img_size=img_size // 4, patch_size=3, stride=2, in_chans=embed_dims[0],\n","#                                               embed_dim=embed_dims[1])\n","#         self.patch_embed4 = OverlapPatchEmbed(img_size=img_size // 8, patch_size=3, stride=2, in_chans=embed_dims[1],\n","#                                               embed_dim=embed_dims[2])\n","\n","#         self.decoder1 =  nn.Conv2d(128, 64, 3, stride=1,padding=1)  \n","#         self.decoder2 =  nn.Conv2d(64, 32, 3, stride=1, padding=1)  \n","#         self.decoder3 =  nn.Conv2d(32, 16, 3, stride=1, padding=1) \n","#         self.decoder4 =  nn.Conv2d(16, 8, 3, stride=1, padding=1)\n","#         self.decoder5 =  nn.Conv2d(8, 8, 3, stride=1, padding=1)\n","\n","#         self.dbn1 = nn.BatchNorm2d(64)\n","#         self.dbn2 = nn.BatchNorm2d(32)\n","#         self.dbn3 = nn.BatchNorm2d(16)\n","#         self.dbn4 = nn.BatchNorm2d(8)\n","        \n","#         self.final = nn.Conv2d(8, num_classes, kernel_size=1)\n","\n","#         self.soft = nn.Softmax(dim =1)\n","\n","#     def forward(self, x):\n","        \n","#         B = x.shape[0]\n","#         ### Encoder\n","#         ### Conv Stage\n","\n","#         ### Stage 1\n","#         out = F.relu(F.max_pool2d(self.ebn1(self.encoder1(x)),2,2))\n","#         t1 = out\n","#         ### Stage 2\n","#         out = F.relu(F.max_pool2d(self.ebn2(self.encoder2(out)),2,2))\n","#         t2 = out\n","#         ### Stage 3\n","#         out = F.relu(F.max_pool2d(self.ebn3(self.encoder3(out)),2,2))\n","#         t3 = out\n","\n","#         ### Tokenized MLP Stage\n","#         ### Stage 4\n","\n","#         out,H,W = self.patch_embed3(out)\n","#         for i, blk in enumerate(self.block1):\n","#             out = blk(out, H, W)\n","#         out = self.norm3(out)\n","#         out = out.reshape(B, H, W, -1).permute(0, 3, 1, 2).contiguous()\n","#         t4 = out\n","\n","#         ### Bottleneck\n","\n","#         out ,H,W= self.patch_embed4(out)\n","#         for i, blk in enumerate(self.block2):\n","#             out = blk(out, H, W)\n","#         out = self.norm4(out)\n","#         out = out.reshape(B, H, W, -1).permute(0, 3, 1, 2).contiguous()\n","\n","#         ### Stage 4\n","\n","#         out = F.relu(F.interpolate(self.dbn1(self.decoder1(out)),scale_factor=(2,2),mode ='bilinear'))\n","        \n","#         out = torch.add(out,t4)\n","#         _,_,H,W = out.shape\n","#         out = out.flatten(2).transpose(1,2)\n","#         for i, blk in enumerate(self.dblock1):\n","#             out = blk(out, H, W)\n","\n","#         ### Stage 3\n","        \n","#         out = self.dnorm3(out)\n","#         out = out.reshape(B, H, W, -1).permute(0, 3, 1, 2).contiguous()\n","#         out = F.relu(F.interpolate(self.dbn2(self.decoder2(out)),scale_factor=(2,2),mode ='bilinear'))\n","#         out = torch.add(out,t3)\n","#         _,_,H,W = out.shape\n","#         out = out.flatten(2).transpose(1,2)\n","        \n","#         for i, blk in enumerate(self.dblock2):\n","#             out = blk(out, H, W)\n","\n","#         out = self.dnorm4(out)\n","#         out = out.reshape(B, H, W, -1).permute(0, 3, 1, 2).contiguous()\n","\n","#         out = F.relu(F.interpolate(self.dbn3(self.decoder3(out)),scale_factor=(2,2),mode ='bilinear'))\n","#         out = torch.add(out,t2)\n","#         out = F.relu(F.interpolate(self.dbn4(self.decoder4(out)),scale_factor=(2,2),mode ='bilinear'))\n","#         out = torch.add(out,t1)\n","#         out = F.relu(F.interpolate(self.decoder5(out),scale_factor=(2,2),mode ='bilinear'))\n","\n","#         return self.final(out)\n","\n","\n","# #EOF\n","\n","\n","# ## DataSet"]},{"cell_type":"code","execution_count":7,"id":"003c6faf","metadata":{"execution":{"iopub.execute_input":"2024-02-18T17:08:55.231167Z","iopub.status.busy":"2024-02-18T17:08:55.230837Z","iopub.status.idle":"2024-02-18T17:08:55.245174Z","shell.execute_reply":"2024-02-18T17:08:55.244255Z"},"papermill":{"duration":0.027746,"end_time":"2024-02-18T17:08:55.247305","exception":false,"start_time":"2024-02-18T17:08:55.219559","status":"completed"},"tags":[]},"outputs":[],"source":["# TODO: image和mask名称不一样时跳过\n","class APODataSet(Dataset):\n","    # 格式不对的异常数据\n","    invalid_img = [10, 184, 185]\n","    def __init__(self, img_dir, mask_dir: str, size) -> None:\n","        # 获取所有图片路径\n","        img_paths = list(Path(img_dir).glob(\"*\"))\n","        mask_paths = list(Path(mask_dir).glob(\"*\"))\n","        self.images = []\n","        self.masks = []\n","        for img_idx in range(len(img_paths)):\n","            img_path = img_paths[img_idx]\n","            img = self.load_image(img_path)\n","            num_channels = len(img.getbands())\n","            if num_channels != 3:\n","                continue\n","            \n","            mask_path = mask_paths[img_idx]\n","#             mask = self.load_image(mask_path)\n","            self.images.append(img_path)\n","            self.masks.append(mask_path)\n","            \n","        # 设置 transforms\n","        self.transform = transforms.Compose([ transforms.Resize(size), \n","                                             transforms.RandomHorizontalFlip(),  # 随机水平翻转\n","                                             transforms.RandomVerticalFlip(),    # 随机垂直旋转\n","                                             transforms.RandomRotation(10) ,     # 随机旋转 （-10,10）度\n","                                             transforms.ToTensor()])\n","#         self.transform = transforms.Compose([transforms.PILToTensor()])\n","\n","    def load_image(self, path) -> Image.Image:\n","        \"Opens an image via a path and returns it.\"\n","        return Image.open(path)\n","    \n","    #  重写 __len__() 方法 (optional but recommended for subclasses of torch.utils.data.Dataset)\n","    def __len__(self) -> int:\n","        \"Returns the total number of samples.\"\n","        return len(self.images)\n","\n","    # 重写 __getitem__() 方法 (required for subclasses of torch.utils.data.Dataset)\n","    def __getitem__(self, index: int) -> Tuple[torch.Tensor, torch.Tensor]:\n","        \"Returns one sample of data, image and mask (X, y).\"\n","        orig_img = self.load_image(self.images[index])\n","        mask_img = self.load_image(self.masks[index])\n","        \n","        seed = np.random.randint(2147483647)\n","        torch.manual_seed(seed)   # 指定同样的随机种子，以保证图片和label的旋转（水平、垂直和rotation）一致\n","        orig_img = self.transform(orig_img)\n","        torch.manual_seed(seed)  # 指定同样的随机种子，以保证图片和label的旋转（水平、垂直和rotation）一致\n","        mask_img = self.transform(mask_img)\n","        \n","        mask_img = torch.where(mask_img>0.5,torch.ones_like(mask_img),torch.zeros_like(mask_img))\n","        return orig_img, mask_img\n"]},{"cell_type":"code","execution_count":8,"id":"f8372f8e","metadata":{"execution":{"iopub.execute_input":"2024-02-18T17:08:55.268653Z","iopub.status.busy":"2024-02-18T17:08:55.268369Z","iopub.status.idle":"2024-02-18T17:08:55.286996Z","shell.execute_reply":"2024-02-18T17:08:55.286114Z"},"papermill":{"duration":0.031622,"end_time":"2024-02-18T17:08:55.28908","exception":false,"start_time":"2024-02-18T17:08:55.257458","status":"completed"},"tags":[]},"outputs":[],"source":["\n","@torch.inference_mode()\n","def evaluate(net, dataloader, device, amp, experiment):\n","    net.eval()\n","    \n","    num_val_batches = len(dataloader)\n","    bce_loss = 0\n","    dice_loss = 0\n","    iou_score = 0\n","\n","    if isinstance(model, nn.DataParallel):\n","        num_classes = net.module.num_classes\n","    else:\n","        num_classes = net.num_classes\n","    \n","    # 因为在非训练过程（推理过程中），已经在网络最后一层加了log和过滤\n","    # 因此这里的损失函数都要使用不带log的\n","    criterion = nn.BCELoss().cuda()\n","    diceloss = smp.losses.DiceLoss(mode='binary', from_logits=False).cuda()\n","    \n","    # iterate over the validation set\n","    with tqdm(total=num_val_batches, desc='Validation round', unit='batch', position=0 ,leave=True) as pbar:\n","        for batch in dataloader:\n","\n","            images, mask_true = batch\n","\n","            # move images and labels to correct device and type\n","            images = images.to(device=device, dtype=torch.float32, memory_format=torch.channels_last)\n","            mask_true = mask_true.to(device=device, dtype=torch.float32)\n","\n","            # predict the mask\n","            mask_pred = net(images)\n","            bce_loss += criterion(mask_pred, mask_true.float())\n","            dice_loss += diceloss(mask_pred, mask_true)\n","\n","            tp, fp, fn, tn = smp.metrics.get_stats(mask_pred, mask_true.long(), mode='binary', threshold=0.5)\n","\n","            iou_score += smp.metrics.iou_score(tp, fp, fn, tn, reduction=\"micro\")\n","            pbar.update(images.shape[0])\n","\n","        bce_loss = (bce_loss / max(num_val_batches, 1))\n","        dice_loss = (dice_loss / max(num_val_batches, 1))\n","\n","        iou_score = (iou_score / max(num_val_batches, 1))\n","        pbar.set_postfix(**{\"Validation bce loss\": bce_loss.item(), \"dice loss\": dice_loss.item(), \"IoU Score\": iou_score.item()})\n","    \n","    try:\n","        histograms = {}\n","        for tag, value in net.named_parameters():\n","            tag = tag.replace('/', '.')\n","            if not (value is None) and not (torch.isinf(value) | torch.isnan(value)).any():\n","                histograms['Weights/' + tag] = wandb.Histogram(value.data.cpu())\n","            if not (value.grad is None) and not (torch.isinf(value.grad) | torch.isnan(value.grad)).any():\n","                histograms['Gradients/' + tag] = wandb.Histogram(value.grad.data.cpu())\n","\n","        experiment.log({\n","            'validation Loss': bce_loss + dice_loss,\n","            'validation IoU Score': iou_score,\n","            'images': wandb.Image(images[0].cpu()),\n","            'masks': {\n","                'true': wandb.Image(mask_true[0].float().cpu()),\n","                'pred': wandb.Image(mask_pred[0].float().cpu()),\n","            },\n","            **histograms\n","        })\n","    except Exception as e:\n","        print(e)\n","        pass\n","    \n","    return (dice_loss, iou_score)    \n","    "]},{"cell_type":"code","execution_count":9,"id":"b3716e9b","metadata":{"execution":{"iopub.execute_input":"2024-02-18T17:08:55.310664Z","iopub.status.busy":"2024-02-18T17:08:55.310366Z","iopub.status.idle":"2024-02-18T17:08:56.585621Z","shell.execute_reply":"2024-02-18T17:08:56.584795Z"},"papermill":{"duration":1.288859,"end_time":"2024-02-18T17:08:56.58802","exception":false,"start_time":"2024-02-18T17:08:55.299161","status":"completed"},"tags":[]},"outputs":[],"source":["import time\n","import torch.optim as optim\n","import segmentation_models_pytorch as smp\n","\n","def train(model, device, project,\n","          epochs: int = 60,\n","          learning_rate: float = 1e-5, \n","          weight_decay: float = 1e-8,\n","          momentum: float = 0.999,\n","          batch_size: int = 6,\n","          amp: bool = False,\n","          gradient_clipping: float = 1.0):\n","    n_train = len(train_data)\n","    n_val = len(validate_data)\n","\n","\n","    if isinstance(model, nn.DataParallel):\n","        num_classes = model.module.num_classes\n","        input_channels = model.module.input_channels\n","    else:\n","        num_classes = model.num_classes\n","        input_channels = model.input_channels\n","        \n","\n","    # (Initialize logging)\n","    experiment = wandb.init(project=project, resume='allow', anonymous='must', notes='水平和垂直翻转，旋转(-10,10)度')\n","    experiment.config.update(\n","        dict(epochs=epochs, batch_size=batch_size, amp=True)\n","    )\n","    logging.info(f'''Starting training:\n","        Epochs:          {epochs}\n","        Batch size:      {batch_size}\n","        Learning rate:   {learning_rate}\n","        Training size:   {n_train}\n","        Validation size: {n_val}\n","        Device:          {device.type}\n","        Mixed Precision: {amp}\n","    ''')\n","    \n","\n","    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n","    scheduler = optim.lr_scheduler.CosineAnnealingWarmRestarts(optimizer, T_0=1, T_mult=2, eta_min=5e-5)  # goal: maximize Dice scor\n","    grad_scaler = torch.cuda.amp.GradScaler(enabled=amp)\n","    \n","    # 训练过程中，网络最后一层没有添加log，所以要使用带log的损失函数\n","    criterion = nn.BCEWithLogitsLoss().cuda()\n","    dice_loss = smp.losses.DiceLoss(mode='binary', from_logits=True).cuda()\n","\n","    global_step = 0\n","\n","    # 5. Begin training\n","    for epoch in range(1, epochs + 1):\n","        model.train()\n","        epoch_loss = 0\n","        with tqdm(total=n_train, desc=f'Epoch {epoch}/{epochs}', unit='batch') as pbar:\n","            for batch in trainloader:\n","                images, true_masks = batch\n","\n","                assert images.shape[1] == input_channels, \\\n","                    f'Network has been defined with {input_channels} input channels, ' \\\n","                    f'but loaded images have {images.shape[1]} channels. Please check that ' \\\n","                    'the images are loaded correctly.'\n","\n","                images = images.to(device=device, dtype=torch.float32, memory_format=torch.channels_last)\n","                \n","                true_masks = true_masks.to(device=device, dtype=torch.long)\n","\n","                with torch.autocast(device.type if device.type != 'mps' else 'cpu', enabled=amp):\n","                    masks_pred = model(images)\n","                    loss = criterion(masks_pred, true_masks.float())\n","                    loss += dice_loss(masks_pred, true_masks)\n","                    tp, fp, fn, tn = smp.metrics.get_stats(masks_pred, true_masks.long(), mode='binary', threshold=0.5)\n","                    iou_score = smp.metrics.iou_score(tp, fp, fn, tn, reduction=\"micro\")\n","    \n","                optimizer.zero_grad(set_to_none=True)\n","                grad_scaler.scale(loss).backward()\n","                torch.nn.utils.clip_grad_norm_(model.parameters(), gradient_clipping)\n","                grad_scaler.step(optimizer)\n","                grad_scaler.update()\n","\n","                pbar.update(images.shape[0])\n","                global_step += 1\n","                epoch_loss += loss.item()\n","                pbar.set_postfix(**{'loss (batch)': epoch_loss/n_train})\n","                if global_step % 10 == 0:\n","                    experiment.log({\n","                        'learning rate': optimizer.param_groups[0]['lr'],\n","                        'train iou': iou_score,\n","                        'train loss': loss.item(),\n","                        'step': global_step,\n","                        'epoch': epoch\n","                    })\n","                \n","\n","           # Evaluation round\n","                division_step = (n_train // batch_size)\n","                if division_step > 0:\n","                    if global_step % division_step == 0:\n","                        val_score, iou_score = evaluate(model, valloader, device, amp, experiment)\n","                        \n","                        model.train()\n","                        scheduler.step(val_score)\n","    experiment.finish()\n"]},{"cell_type":"code","execution_count":10,"id":"0195992d","metadata":{"execution":{"iopub.execute_input":"2024-02-18T17:08:56.609701Z","iopub.status.busy":"2024-02-18T17:08:56.609391Z","iopub.status.idle":"2024-02-18T17:09:02.682743Z","shell.execute_reply":"2024-02-18T17:09:02.681757Z"},"papermill":{"duration":6.086681,"end_time":"2024-02-18T17:09:02.68503","exception":false,"start_time":"2024-02-18T17:08:56.598349","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["dataset info\n","total: 572, train_size: 457, validate_size: 115\n"]}],"source":["batch_size=8\n","dataset =  APODataSet(img_dir = \"/kaggle/input/dltrack/apo_images\",\n","                      mask_dir = \"/kaggle/input/dltrack/apo_masks\",\n","                     size = [512, 512])\n","total = len(dataset)\n","train_size = int(0.8*total)\n","validate_size = total - train_size\n","train_data, validate_data = random_split(dataset, [train_size, validate_size])\n","print(\"dataset info\\ntotal: {}, train_size: {}, validate_size: {}\".format(total, len(train_data), len(validate_data)))\n","trainloader = DataLoader(dataset=train_data,\n","                                     batch_size=batch_size,\n","                                     num_workers=0,\n","                                     shuffle=True)\n","valloader = DataLoader(dataset=validate_data,\n","                                    batch_size=1, \n","                                    num_workers=0, \n","                                    shuffle=False)"]},{"cell_type":"markdown","id":"f82c1253","metadata":{"papermill":{"duration":0.009979,"end_time":"2024-02-18T17:09:02.705489","exception":false,"start_time":"2024-02-18T17:09:02.69551","status":"completed"},"tags":[]},"source":["### 检查异常图片\n","要把找到的异常数据去除"]},{"cell_type":"code","execution_count":11,"id":"4fe35432","metadata":{"execution":{"iopub.execute_input":"2024-02-18T17:09:02.727212Z","iopub.status.busy":"2024-02-18T17:09:02.726437Z","iopub.status.idle":"2024-02-18T17:09:02.73061Z","shell.execute_reply":"2024-02-18T17:09:02.729696Z"},"papermill":{"duration":0.01718,"end_time":"2024-02-18T17:09:02.732692","exception":false,"start_time":"2024-02-18T17:09:02.715512","status":"completed"},"tags":[]},"outputs":[],"source":["# for index in range(len(dataset)):\n","#     orig_img, mask_img = dataset[index]\n","#     if orig_img.size()[0] != 3:\n","#         print(\"{}: orig_img size: {}\".format(index,orig_img.size()))\n","# print(\"[done]\")"]},{"cell_type":"markdown","id":"8eb72f11","metadata":{"papermill":{"duration":0.00993,"end_time":"2024-02-18T17:09:02.752852","exception":false,"start_time":"2024-02-18T17:09:02.742922","status":"completed"},"tags":[]},"source":["### 随机显示一张原始图片和其对应的标记图片"]},{"cell_type":"code","execution_count":12,"id":"a309430a","metadata":{"execution":{"iopub.execute_input":"2024-02-18T17:09:02.774348Z","iopub.status.busy":"2024-02-18T17:09:02.774033Z","iopub.status.idle":"2024-02-18T17:09:03.149975Z","shell.execute_reply":"2024-02-18T17:09:03.148897Z"},"papermill":{"duration":0.391627,"end_time":"2024-02-18T17:09:03.15459","exception":false,"start_time":"2024-02-18T17:09:02.762963","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["torch.Size([3, 512, 512])\n","torch.Size([1, 512, 512])\n","showing image of 27: \n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1080x864 with 2 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["idx = random.randint(0, len(dataset))\n","orig_img, mask_img = dataset[idx]\n","\n","print(orig_img.size())\n","print(mask_img.size())\n","\n","\n","print(\"showing image of {}: \".format(idx))\n","\n","orig_img = orig_img.cpu().numpy().transpose(1, 2, 0)\n","mask_img = mask_img.cpu().numpy().transpose(1, 2, 0)\n","\n","fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (15, 12))\n","\n","ax1.imshow(orig_img)\n","ax1.grid(False)\n","ax1.axis('off')\n","ax1.set_title(\"origin_img\")\n","\n","ax2.imshow(mask_img, cmap=\"gray\")\n","ax2.grid(False)\n","ax2.axis('off')\n","ax2.set_title(\"mask_img\")\n","\n","plt.show()"]},{"cell_type":"markdown","id":"7ccd60dc","metadata":{"papermill":{"duration":0.012611,"end_time":"2024-02-18T17:09:03.180746","exception":false,"start_time":"2024-02-18T17:09:03.168135","status":"completed"},"tags":[]},"source":["## 模型训练"]},{"cell_type":"code","execution_count":13,"id":"cf951052","metadata":{"execution":{"iopub.execute_input":"2024-02-18T17:09:03.207382Z","iopub.status.busy":"2024-02-18T17:09:03.207027Z","iopub.status.idle":"2024-02-18T17:09:05.834705Z","shell.execute_reply":"2024-02-18T17:09:05.83366Z"},"papermill":{"duration":2.643944,"end_time":"2024-02-18T17:09:05.837332","exception":false,"start_time":"2024-02-18T17:09:03.193388","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mtorwayland\u001b[0m (\u001b[33mcupes-wangtao\u001b[0m). Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\r\n"]}],"source":["os.environ['WANDB_API_KEY']='d561f1229ba7c4e207ca34042f29a43552a7447e'\n","!wandb login"]},{"cell_type":"code","execution_count":14,"id":"a2f66faa","metadata":{"execution":{"iopub.execute_input":"2024-02-18T17:09:05.865277Z","iopub.status.busy":"2024-02-18T17:09:05.864895Z","iopub.status.idle":"2024-02-18T19:13:46.40616Z","shell.execute_reply":"2024-02-18T19:13:46.405212Z"},"papermill":{"duration":7480.557451,"end_time":"2024-02-18T19:13:46.408291","exception":false,"start_time":"2024-02-18T17:09:05.85084","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["out_channels: 256 squeeze_radio:  2 up_channel:  64 in_ch (out_channels // squeeze_radio):  32 out_ch(out_channels): 256\n","in_ch:  32 out_channels:  256 groups:  16\n","up_channel:  64 low_channel:  64\n","out_channels: 256 squeeze_radio:  2 low_channel:  64 in_ch (low_channel // squeeze_radio):  32 out_ch(out_channels - low_channel // squeeze_radio): 224\n","out_channels: 128 squeeze_radio:  2 up_channel:  128 in_ch (out_channels // squeeze_radio):  64 out_ch(out_channels): 128\n","in_ch:  64 out_channels:  128 groups:  16\n","up_channel:  128 low_channel:  128\n","out_channels: 128 squeeze_radio:  2 low_channel:  128 in_ch (low_channel // squeeze_radio):  64 out_ch(out_channels - low_channel // squeeze_radio): 64\n","模型参数量为：10516977\n","其详情为：\n","encoder1.weight : torch.Size([16, 3, 3, 3])\n","encoder1.bias : torch.Size([16])\n","encoder2.weight : torch.Size([32, 16, 3, 3])\n","encoder2.bias : torch.Size([32])\n","encoder3.weight : torch.Size([128, 32, 3, 3])\n","encoder3.bias : torch.Size([128])\n","encoder4.SRU.gn.gamma : torch.Size([128, 1, 1])\n","encoder4.SRU.gn.beta : torch.Size([128, 1, 1])\n","encoder4.CRU.squeeze1.weight : torch.Size([32, 64, 1, 1])\n","encoder4.CRU.squeeze2.weight : torch.Size([32, 64, 1, 1])\n","encoder4.CRU.GWC.weight : torch.Size([256, 2, 3, 3])\n","encoder4.CRU.GWC.bias : torch.Size([256])\n","encoder4.CRU.PWC1.weight : torch.Size([256, 32, 1, 1])\n","encoder4.CRU.PWC2.weight : torch.Size([224, 32, 1, 1])\n","ebn1.weight : torch.Size([16])\n","ebn1.bias : torch.Size([16])\n","ebn2.weight : torch.Size([32])\n","ebn2.bias : torch.Size([32])\n","ebn3.weight : torch.Size([128])\n","ebn3.bias : torch.Size([128])\n","ebn4.weight : torch.Size([256])\n","ebn4.bias : torch.Size([256])\n","norm3.weight : torch.Size([512])\n","norm3.bias : torch.Size([512])\n","dnorm4.weight : torch.Size([256])\n","dnorm4.bias : torch.Size([256])\n","block1.0.norm2.weight : torch.Size([512])\n","block1.0.norm2.bias : torch.Size([512])\n","block1.0.mlp.fc1.weight : torch.Size([512, 512])\n","block1.0.mlp.fc1.bias : torch.Size([512])\n","block1.0.mlp.dwconv.dwconv.weight : torch.Size([512, 1, 3, 3])\n","block1.0.mlp.dwconv.dwconv.bias : torch.Size([512])\n","block1.0.mlp.fc2.weight : torch.Size([512, 512])\n","block1.0.mlp.fc2.bias : torch.Size([512])\n","dblock2.0.norm2.weight : torch.Size([256])\n","dblock2.0.norm2.bias : torch.Size([256])\n","dblock2.0.mlp.fc1.weight : torch.Size([256, 256])\n","dblock2.0.mlp.fc1.bias : torch.Size([256])\n","dblock2.0.mlp.dwconv.dwconv.weight : torch.Size([256, 1, 3, 3])\n","dblock2.0.mlp.dwconv.dwconv.bias : torch.Size([256])\n","dblock2.0.mlp.fc2.weight : torch.Size([256, 256])\n","dblock2.0.mlp.fc2.bias : torch.Size([256])\n","patch_embed3.proj.weight : torch.Size([512, 256, 3, 3])\n","patch_embed3.proj.bias : torch.Size([512])\n","patch_embed3.norm.weight : torch.Size([512])\n","patch_embed3.norm.bias : torch.Size([512])\n","dac.dilate1.weight : torch.Size([512, 512, 3, 3])\n","dac.dilate1.bias : torch.Size([512])\n","dac.dilate2.weight : torch.Size([512, 512, 3, 3])\n","dac.dilate2.bias : torch.Size([512])\n","dac.dilate3.weight : torch.Size([512, 512, 3, 3])\n","dac.dilate3.bias : torch.Size([512])\n","dac.conv1x1.weight : torch.Size([512, 512, 1, 1])\n","dac.conv1x1.bias : torch.Size([512])\n","decoder1.weight : torch.Size([256, 512, 3, 3])\n","decoder1.bias : torch.Size([256])\n","decoder2.SRU.gn.gamma : torch.Size([256, 1, 1])\n","decoder2.SRU.gn.beta : torch.Size([256, 1, 1])\n","decoder2.CRU.squeeze1.weight : torch.Size([64, 128, 1, 1])\n","decoder2.CRU.squeeze2.weight : torch.Size([64, 128, 1, 1])\n","decoder2.CRU.GWC.weight : torch.Size([128, 4, 3, 3])\n","decoder2.CRU.GWC.bias : torch.Size([128])\n","decoder2.CRU.PWC1.weight : torch.Size([128, 64, 1, 1])\n","decoder2.CRU.PWC2.weight : torch.Size([64, 64, 1, 1])\n","decoder3.weight : torch.Size([32, 128, 3, 3])\n","decoder3.bias : torch.Size([32])\n","decoder4.weight : torch.Size([16, 32, 3, 3])\n","decoder4.bias : torch.Size([16])\n","decoder5.weight : torch.Size([16, 16, 3, 3])\n","decoder5.bias : torch.Size([16])\n","dbn1.weight : torch.Size([256])\n","dbn1.bias : torch.Size([256])\n","dbn2.weight : torch.Size([128])\n","dbn2.bias : torch.Size([128])\n","dbn3.weight : torch.Size([32])\n","dbn3.bias : torch.Size([32])\n","dbn4.weight : torch.Size([16])\n","dbn4.bias : torch.Size([16])\n","final.weight : torch.Size([1, 16, 1, 1])\n","final.bias : torch.Size([1])\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mtorwayland\u001b[0m (\u001b[33mcupes-wangtao\u001b[0m). Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n"]},{"data":{"text/html":["wandb version 0.16.3 is available!  To upgrade, please run:\n"," $ pip install wandb --upgrade"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["Tracking run with wandb version 0.12.21"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["Run data is saved locally in <code>/kaggle/working/wandb/run-20240218_170909-3fhthadt</code>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["Syncing run <strong><a href=\"https://wandb.ai/cupes-wangtao/nospp-U-Next/runs/3fhthadt\" target=\"_blank\">chromatic-fish-32</a></strong> to <a href=\"https://wandb.ai/cupes-wangtao/nospp-U-Next\" target=\"_blank\">Weights & Biases</a> (<a href=\"https://wandb.me/run\" target=\"_blank\">docs</a>)<br/>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stderr","output_type":"stream","text":["Validation round: 100%|██████████| 115/115 [00:09<00:00, 11.95batch/s, IoU Score=0.136, Validation bce loss=11.6, dice loss=0.765]\n","Epoch 1/100: 100%|██████████| 457/457 [01:24<00:00,  5.42batch/s, loss (batch)=0.194]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.65batch/s, IoU Score=0.0136, Validation bce loss=3.65, dice loss=0.974]\n","Epoch 2/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.175]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.59batch/s, IoU Score=6.63e-7, Validation bce loss=3.69, dice loss=1]\n","Epoch 3/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.152]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.53batch/s, IoU Score=0.000101, Validation bce loss=3.7, dice loss=1]\n","Epoch 4/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.134]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.57batch/s, IoU Score=0.328, Validation bce loss=2.45, dice loss=0.541]\n","Epoch 5/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.119]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.67batch/s, IoU Score=0.424, Validation bce loss=2.14, dice loss=0.434]\n","Epoch 6/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.109]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.69batch/s, IoU Score=0.481, Validation bce loss=2, dice loss=0.375]\n","Epoch 7/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.101]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.55batch/s, IoU Score=0.515, Validation bce loss=1.92, dice loss=0.343]\n","Epoch 8/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0957]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.62batch/s, IoU Score=0.53, Validation bce loss=1.8, dice loss=0.327]\n","Epoch 9/100: 100%|██████████| 457/457 [01:14<00:00,  6.16batch/s, loss (batch)=0.0906]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.67batch/s, IoU Score=0.538, Validation bce loss=1.77, dice loss=0.32]\n","Epoch 10/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.0866]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.66batch/s, IoU Score=0.608, Validation bce loss=1.77, dice loss=0.257]\n","Epoch 11/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.0793]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.61batch/s, IoU Score=0.622, Validation bce loss=1.65, dice loss=0.248]\n","Epoch 12/100: 100%|██████████| 457/457 [01:14<00:00,  6.16batch/s, loss (batch)=0.0732]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.43batch/s, IoU Score=0.642, Validation bce loss=1.55, dice loss=0.23]\n","Epoch 13/100: 100%|██████████| 457/457 [01:14<00:00,  6.12batch/s, loss (batch)=0.069]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.54batch/s, IoU Score=0.63, Validation bce loss=1.6, dice loss=0.241]\n","Epoch 14/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.0656]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.64batch/s, IoU Score=0.639, Validation bce loss=1.57, dice loss=0.234]\n","Epoch 15/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.063]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.69batch/s, IoU Score=0.647, Validation bce loss=1.56, dice loss=0.228]\n","Epoch 16/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0602]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.57batch/s, IoU Score=0.655, Validation bce loss=1.55, dice loss=0.22]\n","Epoch 17/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0579]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.68batch/s, IoU Score=0.65, Validation bce loss=1.47, dice loss=0.226]\n","Epoch 18/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0572]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.63batch/s, IoU Score=0.658, Validation bce loss=1.51, dice loss=0.219]\n","Epoch 19/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0544]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.59batch/s, IoU Score=0.655, Validation bce loss=1.48, dice loss=0.22]\n","Epoch 20/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0528]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.57batch/s, IoU Score=0.664, Validation bce loss=1.43, dice loss=0.214]\n","Epoch 21/100: 100%|██████████| 457/457 [01:14<00:00,  6.12batch/s, loss (batch)=0.0511]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.54batch/s, IoU Score=0.671, Validation bce loss=1.44, dice loss=0.208]\n","Epoch 22/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.0503]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.52batch/s, IoU Score=0.669, Validation bce loss=1.46, dice loss=0.21]\n","Epoch 23/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.0485]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.62batch/s, IoU Score=0.674, Validation bce loss=1.41, dice loss=0.206]\n","Epoch 24/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0475]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.65batch/s, IoU Score=0.665, Validation bce loss=1.37, dice loss=0.215]\n","Epoch 25/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0463]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.60batch/s, IoU Score=0.673, Validation bce loss=1.37, dice loss=0.208]\n","Epoch 26/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0456]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.64batch/s, IoU Score=0.674, Validation bce loss=1.38, dice loss=0.207]\n","Epoch 27/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0444]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.63batch/s, IoU Score=0.68, Validation bce loss=1.41, dice loss=0.202]\n","Epoch 28/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.044]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.67batch/s, IoU Score=0.683, Validation bce loss=1.39, dice loss=0.2]\n","Epoch 29/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.0428]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.60batch/s, IoU Score=0.684, Validation bce loss=1.37, dice loss=0.199]\n","Epoch 30/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0424]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.58batch/s, IoU Score=0.681, Validation bce loss=1.36, dice loss=0.201]\n","Epoch 31/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.0422]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.57batch/s, IoU Score=0.687, Validation bce loss=1.36, dice loss=0.197]\n","Epoch 32/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0412]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.67batch/s, IoU Score=0.685, Validation bce loss=1.39, dice loss=0.199]\n","Epoch 33/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0426]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.63batch/s, IoU Score=0.685, Validation bce loss=1.38, dice loss=0.199]\n","Epoch 34/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0397]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.63batch/s, IoU Score=0.687, Validation bce loss=1.36, dice loss=0.199]\n","Epoch 35/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.0412]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.58batch/s, IoU Score=0.686, Validation bce loss=1.33, dice loss=0.2]\n","Epoch 36/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.0389]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.66batch/s, IoU Score=0.693, Validation bce loss=1.37, dice loss=0.192]\n","Epoch 37/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.0384]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.68batch/s, IoU Score=0.689, Validation bce loss=1.33, dice loss=0.197]\n","Epoch 38/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0402]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.71batch/s, IoU Score=0.692, Validation bce loss=1.35, dice loss=0.194]\n","Epoch 39/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.0376]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.60batch/s, IoU Score=0.69, Validation bce loss=1.36, dice loss=0.195]\n","Epoch 40/100: 100%|██████████| 457/457 [01:14<00:00,  6.16batch/s, loss (batch)=0.0372]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.69batch/s, IoU Score=0.691, Validation bce loss=1.36, dice loss=0.195]\n","Epoch 41/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0367]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.63batch/s, IoU Score=0.69, Validation bce loss=1.39, dice loss=0.195]\n","Epoch 42/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.037]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.66batch/s, IoU Score=0.697, Validation bce loss=1.36, dice loss=0.19]\n","Epoch 43/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.0363]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.64batch/s, IoU Score=0.69, Validation bce loss=1.38, dice loss=0.195]\n","Epoch 44/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.036]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.54batch/s, IoU Score=0.691, Validation bce loss=1.3, dice loss=0.195]\n","Epoch 45/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.036]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.62batch/s, IoU Score=0.697, Validation bce loss=1.32, dice loss=0.19]\n","Epoch 46/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0354]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.72batch/s, IoU Score=0.694, Validation bce loss=1.31, dice loss=0.192]\n","Epoch 47/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.0353]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.62batch/s, IoU Score=0.702, Validation bce loss=1.28, dice loss=0.186]\n","Epoch 48/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0347]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.64batch/s, IoU Score=0.703, Validation bce loss=1.29, dice loss=0.186]\n","Epoch 49/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.0346]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.62batch/s, IoU Score=0.699, Validation bce loss=1.34, dice loss=0.189]\n","Epoch 50/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0348]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.69batch/s, IoU Score=0.694, Validation bce loss=1.32, dice loss=0.194]\n","Epoch 51/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.0346]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.39batch/s, IoU Score=0.7, Validation bce loss=1.34, dice loss=0.188]\n","Epoch 52/100: 100%|██████████| 457/457 [01:14<00:00,  6.12batch/s, loss (batch)=0.034]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.61batch/s, IoU Score=0.698, Validation bce loss=1.34, dice loss=0.189]\n","Epoch 53/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.0335]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.62batch/s, IoU Score=0.697, Validation bce loss=1.3, dice loss=0.191]\n","Epoch 54/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0337]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.38batch/s, IoU Score=0.704, Validation bce loss=1.32, dice loss=0.186]\n","Epoch 55/100: 100%|██████████| 457/457 [01:14<00:00,  6.09batch/s, loss (batch)=0.0336]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.55batch/s, IoU Score=0.704, Validation bce loss=1.31, dice loss=0.186]\n","Epoch 56/100: 100%|██████████| 457/457 [01:14<00:00,  6.12batch/s, loss (batch)=0.0333]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.56batch/s, IoU Score=0.698, Validation bce loss=1.31, dice loss=0.19]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.65batch/s, IoU Score=0.706, Validation bce loss=1.3, dice loss=0.184]\n","Epoch 57/100: 100%|██████████| 457/457 [01:24<00:00,  5.44batch/s, loss (batch)=0.033]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.60batch/s, IoU Score=0.699, Validation bce loss=1.32, dice loss=0.19]\n","Epoch 58/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0329]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.60batch/s, IoU Score=0.696, Validation bce loss=1.31, dice loss=0.192]\n","Epoch 59/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0328]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.66batch/s, IoU Score=0.7, Validation bce loss=1.35, dice loss=0.188]\n","Epoch 60/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.0347]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.67batch/s, IoU Score=0.699, Validation bce loss=1.32, dice loss=0.19]\n","Epoch 61/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0322]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.55batch/s, IoU Score=0.71, Validation bce loss=1.26, dice loss=0.181]\n","Epoch 62/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.0343]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.59batch/s, IoU Score=0.701, Validation bce loss=1.33, dice loss=0.188]\n","Epoch 63/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0321]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.66batch/s, IoU Score=0.706, Validation bce loss=1.3, dice loss=0.184]\n","Epoch 64/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.0318]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.53batch/s, IoU Score=0.703, Validation bce loss=1.34, dice loss=0.185]\n","Epoch 65/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0338]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.60batch/s, IoU Score=0.705, Validation bce loss=1.27, dice loss=0.185]\n","Epoch 66/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.0315]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.68batch/s, IoU Score=0.703, Validation bce loss=1.32, dice loss=0.186]\n","Epoch 67/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0318]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.59batch/s, IoU Score=0.703, Validation bce loss=1.3, dice loss=0.186]\n","Epoch 68/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.0317]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.62batch/s, IoU Score=0.707, Validation bce loss=1.29, dice loss=0.184]\n","Epoch 69/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0317]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.67batch/s, IoU Score=0.703, Validation bce loss=1.34, dice loss=0.186]\n","Epoch 70/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0312]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.52batch/s, IoU Score=0.7, Validation bce loss=1.3, dice loss=0.193]\n","Epoch 71/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0313]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.71batch/s, IoU Score=0.705, Validation bce loss=1.27, dice loss=0.187]\n","Epoch 72/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.0314]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.75batch/s, IoU Score=0.704, Validation bce loss=1.33, dice loss=0.184]\n","Epoch 73/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.0307]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.56batch/s, IoU Score=0.707, Validation bce loss=1.29, dice loss=0.184]\n","Epoch 74/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.0312]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.56batch/s, IoU Score=0.706, Validation bce loss=1.27, dice loss=0.185]\n","Epoch 75/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.0327]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.65batch/s, IoU Score=0.707, Validation bce loss=1.28, dice loss=0.184]\n","Epoch 76/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0305]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.69batch/s, IoU Score=0.705, Validation bce loss=1.31, dice loss=0.186]\n","Epoch 77/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.0308]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.70batch/s, IoU Score=0.702, Validation bce loss=1.29, dice loss=0.188]\n","Epoch 78/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0309]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.60batch/s, IoU Score=0.704, Validation bce loss=1.29, dice loss=0.187]\n","Epoch 79/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.0304]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.59batch/s, IoU Score=0.708, Validation bce loss=1.27, dice loss=0.184]\n","Epoch 80/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.0301]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.71batch/s, IoU Score=0.714, Validation bce loss=1.24, dice loss=0.18]\n","Epoch 81/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.0299]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.61batch/s, IoU Score=0.701, Validation bce loss=1.28, dice loss=0.19]\n","Epoch 82/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0303]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.65batch/s, IoU Score=0.704, Validation bce loss=1.27, dice loss=0.188]\n","Epoch 83/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0301]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.64batch/s, IoU Score=0.699, Validation bce loss=1.28, dice loss=0.192]\n","Epoch 84/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0301]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.54batch/s, IoU Score=0.704, Validation bce loss=1.34, dice loss=0.186]\n","Epoch 85/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.0296]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.62batch/s, IoU Score=0.713, Validation bce loss=1.25, dice loss=0.179]\n","Epoch 86/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0296]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.68batch/s, IoU Score=0.705, Validation bce loss=1.27, dice loss=0.186]\n","Epoch 87/100: 100%|██████████| 457/457 [01:14<00:00,  6.15batch/s, loss (batch)=0.0293]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.58batch/s, IoU Score=0.705, Validation bce loss=1.26, dice loss=0.186]\n","Epoch 88/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0296]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.54batch/s, IoU Score=0.707, Validation bce loss=1.3, dice loss=0.182]\n","Epoch 89/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0293]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.59batch/s, IoU Score=0.701, Validation bce loss=1.33, dice loss=0.188]\n","Epoch 90/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.0302]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.59batch/s, IoU Score=0.708, Validation bce loss=1.27, dice loss=0.182]\n","Epoch 91/100: 100%|██████████| 457/457 [01:14<00:00,  6.14batch/s, loss (batch)=0.0289]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.55batch/s, IoU Score=0.702, Validation bce loss=1.28, dice loss=0.189]\n","Epoch 92/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.0294]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.69batch/s, IoU Score=0.704, Validation bce loss=1.27, dice loss=0.186]\n","Epoch 93/100: 100%|██████████| 457/457 [01:14<00:00,  6.13batch/s, loss (batch)=0.0291]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.41batch/s, IoU Score=0.708, Validation bce loss=1.29, dice loss=0.182]\n","Epoch 94/100: 100%|██████████| 457/457 [01:14<00:00,  6.11batch/s, loss (batch)=0.0313]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.34batch/s, IoU Score=0.705, Validation bce loss=1.29, dice loss=0.186]\n","Epoch 95/100: 100%|██████████| 457/457 [01:14<00:00,  6.10batch/s, loss (batch)=0.0287]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.49batch/s, IoU Score=0.706, Validation bce loss=1.3, dice loss=0.186]\n","Epoch 96/100: 100%|██████████| 457/457 [01:14<00:00,  6.12batch/s, loss (batch)=0.0285]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.50batch/s, IoU Score=0.694, Validation bce loss=1.3, dice loss=0.194]\n","Epoch 97/100: 100%|██████████| 457/457 [01:14<00:00,  6.11batch/s, loss (batch)=0.0292]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.36batch/s, IoU Score=0.717, Validation bce loss=1.23, dice loss=0.176]\n","Epoch 98/100: 100%|██████████| 457/457 [01:14<00:00,  6.11batch/s, loss (batch)=0.029]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.52batch/s, IoU Score=0.702, Validation bce loss=1.29, dice loss=0.188]\n","Epoch 99/100: 100%|██████████| 457/457 [01:14<00:00,  6.11batch/s, loss (batch)=0.0292]\n","Validation round: 100%|██████████| 115/115 [00:09<00:00, 12.48batch/s, IoU Score=0.711, Validation bce loss=1.26, dice loss=0.18]\n","Epoch 100/100: 100%|██████████| 457/457 [01:14<00:00,  6.10batch/s, loss (batch)=0.0296]\n"]},{"data":{"text/html":["Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"807d194be7c5469aac18cab6c76482e2","version_major":2,"version_minor":0},"text/plain":["VBox(children=(Label(value='18.989 MB of 18.989 MB uploaded (0.000 MB deduped)\\r'), FloatProgress(value=1.0, m…"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<style>\n","    table.wandb td:nth-child(1) { padding: 0 10px; text-align: left ; width: auto;} td:nth-child(2) {text-align: left ; width: 100%}\n","    .wandb-row { display: flex; flex-direction: row; flex-wrap: wrap; justify-content: flex-start; width: 100% }\n","    .wandb-col { display: flex; flex-direction: column; flex-basis: 100%; flex: 1; padding: 10px; }\n","    </style>\n","<div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>epoch</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▇▇▇▇▇▇███</td></tr><tr><td>learning rate</td><td>▇█▅▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>step</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▇▇▇▇▇▇███</td></tr><tr><td>train iou</td><td>▁▁▁▁▆▇▇▇▇▆▅▇▆▆▇▇▆▇▇▇██▇██▇▇█▇▆▆██▇▆███▆▆</td></tr><tr><td>train loss</td><td>█▇▅▄▃▃▃▂▂▃▃▂▂▂▂▂▂▁▁▂▁▁▂▁▁▂▂▁▁▂▂▁▁▁▂▁▁▁▂▂</td></tr><tr><td>validation IoU Score</td><td>▂▁▅▆▇▇▇▇████████████████████████████████</td></tr><tr><td>validation Loss</td><td>█▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>epoch</td><td>100</td></tr><tr><td>learning rate</td><td>1e-05</td></tr><tr><td>step</td><td>5800</td></tr><tr><td>train iou</td><td>0.44302</td></tr><tr><td>train loss</td><td>0.48318</td></tr><tr><td>validation IoU Score</td><td>0.71135</td></tr><tr><td>validation Loss</td><td>1.44069</td></tr></table><br/></div></div>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["Synced <strong style=\"color:#cdcd00\">chromatic-fish-32</strong>: <a href=\"https://wandb.ai/cupes-wangtao/nospp-U-Next/runs/3fhthadt\" target=\"_blank\">https://wandb.ai/cupes-wangtao/nospp-U-Next/runs/3fhthadt</a><br/>Synced 6 W&B file(s), 303 media file(s), 0 artifact file(s) and 0 other file(s)"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["Find logs at: <code>./wandb/run-20240218_170909-3fhthadt/logs</code>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"}],"source":["epochs=100\n","if __name__ == '__main__':\n","    model = UNext(n_channels=3, num_classes=1, bilinear=False)\n","    \n","    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","    if torch.cuda.device_count() > 1:\n","        print(\"Let's use\", torch.cuda.device_count(), \"GPUs!\")\n","        model = nn.DataParallel(model)\n","\n","    model = model.to(memory_format=torch.channels_last)\n","    model.to(device)\n","    total_params = sum(p.numel() for p in model.parameters())\n","    print(f\"模型参数量为：{total_params}\")\n","    print(\"其详情为：\")\n","    for name,parameters in model.named_parameters():\n","        print(name,':',parameters.size())\n","    train(model, device, project=\"nospp-U-Next\", epochs=epochs, batch_size=batch_size)"]}],"metadata":{"kaggle":{"accelerator":"gpu","dataSources":[{"datasetId":3664633,"sourceId":6361775,"sourceType":"datasetVersion"}],"dockerImageVersionId":30236,"isGpuEnabled":true,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.12"},"papermill":{"default_parameters":{},"duration":7536.189313,"end_time":"2024-02-18T19:13:50.581413","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-02-18T17:08:14.3921","version":"2.3.4"},"widgets":{"application/vnd.jupyter.widget-state+json":{"state":{"1d1b3f49e5554ea88938aabf975520cf":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"LabelModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"LabelModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"LabelView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e97b2abfb06f452cbffa1e1b92ae2274","placeholder":"​","style":"IPY_MODEL_bc9f5915b18d498c813f605b54fd0759","value":"19.557 MB of 19.557 MB uploaded (0.000 MB deduped)\r"}},"312de97dbc4b4f9e9caa3b8f1d1a90b6":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"614ceddfe6794c4e87ee91dba34daea9":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"807d194be7c5469aac18cab6c76482e2":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"VBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_1d1b3f49e5554ea88938aabf975520cf","IPY_MODEL_e5946a309b864053a12a8ad70e2eae29"],"layout":"IPY_MODEL_d364f2f378ff4a7b9618f07d5bbd4489"}},"bc9f5915b18d498c813f605b54fd0759":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d364f2f378ff4a7b9618f07d5bbd4489":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e5946a309b864053a12a8ad70e2eae29":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_312de97dbc4b4f9e9caa3b8f1d1a90b6","max":1.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_614ceddfe6794c4e87ee91dba34daea9","value":1.0}},"e97b2abfb06f452cbffa1e1b92ae2274":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}}},"version_major":2,"version_minor":0}}},"nbformat":4,"nbformat_minor":5}